{"version":3,"file":"image-d12f28e2.js","sources":["../../../../../src/lib/utils/image.ts"],"sourcesContent":["import FastAverageColor from 'fast-average-color';\n\nconst fac = new FastAverageColor();\n\nexport function luminance(r: number, g: number, b: number): number {\n  const a = [r, g, b].map((v) => {\n    v /= 255;\n    return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\n  });\n  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n}\n\nexport async function getImageCornerColors(element: HTMLImageElement): Promise<{ background: string; light: boolean }> {\n  const halfWidth = element.naturalWidth / 2;\n  const halfHeight = element.naturalHeight / 2;\n\n  // TODO Cleanup\n  return Promise.all([\n    // Top Left\n    new Promise((resolve) => {\n      fac.getColorAsync(element, { width: halfWidth, height: halfHeight }).then((color) => {\n        if (color && 'hex' in color) {\n          resolve(color.hex);\n        }\n      });\n    }),\n    // Top Right\n    new Promise((resolve) => {\n      fac.getColorAsync(element, { width: halfWidth, height: halfHeight, left: halfWidth }).then((color) => {\n        if (color && 'hex' in color) {\n          resolve(color.hex);\n        }\n      });\n    }),\n    // Bottom Left\n    new Promise((resolve) => {\n      fac.getColorAsync(element, { width: halfWidth, height: halfHeight, top: halfHeight }).then((color) => {\n        if (color && 'hex' in color) {\n          resolve(color.hex);\n        }\n      });\n    }),\n    // Bottom Right\n    new Promise((resolve) => {\n      fac\n        .getColorAsync(element, {\n          width: halfWidth,\n          height: halfHeight,\n          left: halfWidth,\n          top: halfHeight\n        })\n        .then((color) => {\n          if (color && 'hex' in color) {\n            resolve(color.hex);\n          }\n        });\n    }),\n    // Lightness\n    new Promise((resolve) => {\n      fac.getColorAsync(element).then((color) => {\n        if (color && 'value' in color) {\n          resolve(color.value);\n        }\n      });\n    })\n  ]).then((colors) => {\n    let result = '';\n    result += `linear-gradient(to bottom right, ${colors[0]}, 35%, transparent),`;\n    result += `linear-gradient(to bottom left, ${colors[1]}, 35%, transparent),`;\n    result += `linear-gradient(to top right, ${colors[2]}, 35%, transparent),`;\n    result += `linear-gradient(to top left, ${colors[3]}, 35%, transparent),`;\n    result += `linear-gradient(rgb(64, 64, 64), rgb(64, 64, 64));`;\n    return {\n      background: result,\n      light: luminance(colors[4][0] as number, colors[4][1] as number, colors[4][2] as number) > 0.4\n    };\n  });\n}\n"],"names":[],"mappings":"0CAEA,KAAM,GAAM,GAAI,cAEU,EAAW,EAAW,EAAmB,MAC3D,GAAI,CAAC,EAAG,EAAG,GAAG,IAAI,AAAC,OAClB,IACE,GAAK,OAAU,EAAI,MAAQ,KAAK,OAAS,MAAS,MAAO,aAE3D,GAAE,GAAK,MAAS,EAAE,GAAK,MAAS,EAAE,GAAK,uBAGL,EAA4E,MAC/G,GAAY,EAAQ,aAAe,EACnC,EAAa,EAAQ,cAAgB,QAGpC,SAAQ,IAAI,CAEjB,GAAI,SAAQ,AAAC,GAAY,GACnB,cAAc,EAAS,CAAE,MAAO,EAAW,OAAQ,IAAc,KAAK,AAAC,GAAU,CAC/E,GAAS,OAAS,MACZ,EAAM,SAKpB,GAAI,SAAQ,AAAC,GAAY,GACnB,cAAc,EAAS,CAAE,MAAO,EAAW,OAAQ,EAAY,KAAM,IAAa,KAAK,AAAC,GAAU,CAChG,GAAS,OAAS,MACZ,EAAM,SAKpB,GAAI,SAAQ,AAAC,GAAY,GACnB,cAAc,EAAS,CAAE,MAAO,EAAW,OAAQ,EAAY,IAAK,IAAc,KAAK,AAAC,GAAU,CAChG,GAAS,OAAS,MACZ,EAAM,SAKpB,GAAI,SAAQ,AAAC,GAAY,GAEpB,cAAc,EAAS,CACtB,MAAO,EACP,OAAQ,EACR,KAAM,EACN,IAAK,IAEN,KAAK,AAAC,GAAU,CACX,GAAS,OAAS,MACZ,EAAM,SAKtB,GAAI,SAAQ,AAAC,GAAY,GACnB,cAAc,GAAS,KAAK,AAAC,GAAU,CACrC,GAAS,SAAW,MACd,EAAM,aAInB,KAAK,AAAC,GAAW,IACd,GAAS,aACH,oCAAoC,EAAO,4BAC3C,mCAAmC,EAAO,4BAC1C,iCAAiC,EAAO,4BACxC,gCAAgC,EAAO,4BACvC,qDACH,CACL,WAAY,EACZ,MAAO,EAAU,EAAO,GAAG,GAAc,EAAO,GAAG,GAAc,EAAO,GAAG,IAAgB"}