{"version":3,"file":"VersionForm-15622f7f.js","sources":["../../../../../src/lib/models/versions.ts","../../../../../src/lib/utils/pretty.ts","../../../../../src/lib/components/versions/VersionForm.svelte"],"sourcesContent":["import * as zod from \"zod\";\nimport * as JSZip from 'jszip';\nimport {validateUPluginJson} from \"$lib/utils/uplugin\";\nimport type {Writable} from \"svelte/store\";\nimport type {ZodObject, ZodRawShape} from \"zod\";\nimport type {File} from \"$lib/models/file\";\nimport type {VersionStabilities} from \"$lib/generated\";\n\nexport type VersionData = {\n  file: File;\n  changelog: string;\n  stability: VersionStabilities;\n}\n\nexport type VersionMetadata = {\n  uplugin: {\n    Version: string;\n    SemVersion?: string;\n    Plugins?: {\n      Name: string;\n      SemVersion?: string;\n    }[];\n  };\n  objects: string[];\n}\n\nexport const constructVersionSchema = (modReference: string, modMetadata: Writable<VersionMetadata>): ZodObject<ZodRawShape> => {\n  return zod.object({\n    file: zod.optional(zod.any().superRefine(async (file, ctx) => {\n      if (!('name' in file && 'size' in file && 'type' in file)) {\n        ctx.addIssue({\n          message: 'Unknown file error',\n          code: zod.ZodIssueCode.custom\n        });\n        return;\n      }\n\n      const result = await validateModZip(file, modReference);\n\n      if ('message' in result) {\n        ctx.addIssue({\n          message: result.message as string,\n          code: zod.ZodIssueCode.custom\n        });\n        return;\n      }\n\n      modMetadata.set(result as VersionMetadata);\n    })),\n    changelog: zod.string(),\n    stability: zod.string(),\n  });\n}\n\nconst validateModZip = async (file: unknown, modReference: string): Promise<{ [key: string]: unknown } | VersionMetadata> => {\n  const zipper = new JSZip();\n  return zipper.loadAsync(file).then((zip) => {\n    const uPluginJsonFile = zip.file(modReference + '.uplugin');\n    if (uPluginJsonFile) {\n      return validateUPluginJsonModZip(zip, uPluginJsonFile, modReference);\n    }\n\n    return {\n      message: modReference + '.uplugin missing from mod'\n    };\n  }).catch((err) => {\n    return {\n      message: 'invalid zip/smod file: ' + err\n    };\n  });\n}\n\nconst validateUPluginJsonModZip = async (zip: JSZip, uPluginJsonFile: JSZip.JSZipObject, modReference: string): Promise<{ [key: string]: unknown } | VersionMetadata> => {\n  return uPluginJsonFile.async('string').then(async (uPluginJson) => {\n    const result = await validateUPluginJson(uPluginJson);\n\n    if (result.length != 0) {\n      return {\n        message: `invalid ${modReference}.uplugin`,\n        extended: result\n      };\n    }\n\n    const parsed = JSON.parse(uPluginJson);\n\n    let foundSML = false;\n    for (const dependency of parsed.Plugins) {\n      if (dependency.Name === \"SML\") {\n        foundSML = true;\n        break;\n      }\n    }\n\n    if (!foundSML) {\n      return {\n        message: 'mod must depend on SML'\n      };\n    }\n\n    return {\n      uplugin: parsed,\n      objects: Object.keys(zip.files).filter(f => f.endsWith('.dll') || f.endsWith('.pak'))\n    };\n  }).catch((err) => {\n    return {\n      message: `invalid ${modReference}.uplugin: ${err}`\n    };\n  });\n}\n","export const formatBytes = (value: number): string => {\n  const [multiple, k, suffix] = ([1000, 'k', 'B']) as [number, string, string];\n  const exp = (Math.log(value) / Math.log(multiple)) | 0;\n  const size = Number((value / Math.pow(multiple, exp)).toFixed(2));\n  return (\n    size +\n    ' ' +\n    (exp\n      ? (k + 'MGTPEZY')[exp - 1] + suffix\n      : 'byte' + (size !== 1 ? 's' : ''))\n  );\n}\n","<script lang=\"ts\">\n  import {createForm} from 'felte';\n  import {validator} from '@felte/validator-zod';\n  import {svelteReporter, ValidationMessage} from '@felte/reporter-svelte';\n  import type {VersionData, VersionMetadata} from \"$lib/models/versions\";\n  import {constructVersionSchema} from \"$lib/models/versions\";\n  import {trimNonSchema} from \"$lib/utils/forms\";\n  import {markdown} from '$lib/utils/markdown';\n  import {writable} from \"svelte/store\";\n  import {formatBytes} from \"$lib/utils/pretty\";\n\n  export let modReference: string;\n  export let onSubmit: (data: VersionData) => Promise<void>;\n  export let initialValues: Omit<VersionData, 'file'> | undefined = undefined;\n  export let submitText = 'Create';\n\n  export let editing = false;\n\n  const modMeta = writable<VersionMetadata>();\n\n  let disabled = false;\n\n  const versionSchema = constructVersionSchema(modReference, modMeta);\n  const {form, data} = createForm<VersionData>({\n    initialValues: initialValues as VersionData,\n    extend: [validator, svelteReporter],\n    validateSchema: versionSchema,\n    onSubmit: (data) => {\n      disabled = true;\n      onSubmit(trimNonSchema(data, versionSchema)).then(() => disabled = false);\n    },\n  });\n\n  $: preview = ($data.changelog as string) || '';\n</script>\n\n<form use:form>\n  <div class=\"grid grid-flow-row gap-6\">\n    <div class=\"grid grid-flow-row gap-2\">\n      <label for=\"stability\">Stability:</label>\n      <select id=\"stability\" class=\"base-input\" name=\"stability\">\n        <option value=\"alpha\">Alpha</option>\n        <option value=\"beta\">Beta</option>\n        <option value=\"release\">Release</option>\n      </select>\n      <ValidationMessage for=\"stability\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    {#if !editing}\n      <div class=\"grid grid-flow-row gap-2\">\n        <label for=\"file\">File:</label>\n        <input id=\"file\" class=\"base-input\" name=\"file\" type=\"file\" accept=\".zip,.smod\" placeholder=\"File\">\n        <ValidationMessage for=\"file\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n\n      {#if $data.file}\n        <div>\n          <span><strong>File Type:</strong> { $data.file.type || 'Unknown' }</span><br>\n          <span><strong>File Size:</strong> { formatBytes($data.file.size) }</span>\n        </div>\n      {/if}\n\n      {#if $modMeta}\n        <div>\n          <p class=\"mb-4\">\n            <span><strong>Version:</strong> { $modMeta.uplugin.Version }<br></span>\n\n            {#if $modMeta.uplugin.SemVersion !== undefined}\n              <span><strong>SemVersion:</strong> { $modMeta.uplugin.SemVersion }<br></span>\n            {:else}\n              <span class=\"text-yellow-600\">\n                Mod is missing SemVersion field! Are you sure you want to continue? Your version will be set to { $modMeta.uplugin.Version }.0.0\n              </span>\n            {/if}\n          </p>\n\n          {#if $modMeta.uplugin.Plugins !== undefined}\n            <p>\n              <strong>Dependencies:</strong><br>\n              {#each $modMeta.uplugin.Plugins as dependency}\n                <strong>{ dependency.Name }: </strong>\n                {#if dependency.SemVersion}\n                  <span>{ dependency.SemVersion }</span>\n                {:else}\n                  <span>*</span>\n                {/if}\n                <br>\n              {/each}\n            </p>\n          {/if}\n\n          {#if $modMeta.objects && $modMeta.objects.length > 0}\n            <p>\n              <strong>Objects:</strong><br>\n              {#each $modMeta.objects as object}\n                <span>{ object }</span>\n                <br>\n              {/each}\n            </p>\n          {:else}\n            <p>\n              <span class=\"text-yellow-600\">\n                Mod contains no objects (.dll, .pak)! Are you sure you want to continue?\n              </span>\n            </p>\n          {/if}\n        </div>\n      {/if}\n    {/if}\n\n    <div class=\"grid gap-6 split\">\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <label for=\"changelog\">Changelog:</label>\n        <textarea class=\"base-input\" id=\"changelog\" name=\"changelog\" placeholder=\"Changelog\" rows=\"10\"></textarea>\n        <ValidationMessage for=\"changelog\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <span>Preview:</span>\n        {#await markdown(preview) then previewRendered}\n          <div class=\"markdown-content right\">{ @html previewRendered}</div>\n        {/await}\n      </div>\n    </div>\n\n    <div>\n      <input type=\"submit\" disabled={disabled} value={submitText} class=\"px-4 py-2 rounded text-base bg-blue-500 cursor-pointer disabled:opacity-50\">\n    </div>\n  </div>\n</form>\n\n<style lang=\"postcss\">\n  .split {\n    grid-template-columns: 50% 50%;\n\n    & .right {\n      max-height: 75vh;\n      overflow: auto;\n    }\n  }\n</style>\n"],"names":["validateModZip","async","file","modReference","JSZip","loadAsync","then","zip","uPluginJsonFile","validateUPluginJsonModZip","message","catch","err","uPluginJson","result","validateUPluginJson","length","extended","parsed","JSON","parse","foundSML","dependency","Plugins","Name","uplugin","objects","Object","keys","files","filter","f","endsWith","formatBytes","value","multiple","k","suffix","exp","Math","log","size","Number","pow","toFixed","ctx","ctx2","type","Version","SemVersion","markdown","onSubmit","initialValues","submitText","editing","modMeta","writable","disabled","versionSchema","modMetadata","zod.object","zod.optional","zod.any","superRefine","addIssue","code","zod.ZodIssueCode","custom","set","changelog","zod.string","stability","constructVersionSchema","form","data","createForm","extend","validator","svelteReporter","validateSchema","trimNonSchema","data2","preview","$data"],"mappings":"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"}