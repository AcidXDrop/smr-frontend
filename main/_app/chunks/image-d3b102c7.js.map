{"version":3,"file":"image-d3b102c7.js","sources":["../../../../../src/lib/utils/image.ts"],"sourcesContent":["import FastAverageColor from \"fast-average-color\";\n\nconst fac = new FastAverageColor();\n\nexport function luminance(r: number, g: number, b: number): number {\n  const a = [r, g, b].map((v) => {\n    v /= 255;\n    return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\n  });\n  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n}\n\nexport async function getImageCornerColors(element: HTMLImageElement): Promise<{ background: string, light: boolean }> {\n  const halfWidth = element.naturalWidth / 2;\n  const halfHeight = element.naturalHeight / 2;\n\n  // TODO Cleanup\n  return Promise.all([\n    // Top Left\n    new Promise(resolve => {\n      fac.getColorAsync(element, {width: halfWidth, height: halfHeight}).then(color => {\n        if (color && 'hex' in color) {\n          resolve(color.hex);\n        }\n      });\n    }),\n    // Top Right\n    new Promise(resolve => {\n      fac.getColorAsync(element, {width: halfWidth, height: halfHeight, left: halfWidth}).then(color => {\n        if (color && 'hex' in color) {\n          resolve(color.hex);\n        }\n      });\n    }),\n    // Bottom Left\n    new Promise(resolve => {\n      fac.getColorAsync(element, {width: halfWidth, height: halfHeight, top: halfHeight}).then(color => {\n        if (color && 'hex' in color) {\n          resolve(color.hex);\n        }\n      });\n    }),\n    // Bottom Right\n    new Promise(resolve => {\n      fac.getColorAsync(element, {\n        width: halfWidth,\n        height: halfHeight,\n        left: halfWidth,\n        top: halfHeight\n      }).then(color => {\n        if (color && 'hex' in color) {\n          resolve(color.hex);\n        }\n      });\n    }),\n    // Lightness\n    new Promise(resolve => {\n      fac.getColorAsync(element).then(color => {\n        if (color && 'value' in color) {\n          resolve(color.value);\n        }\n      });\n    })\n  ]).then(colors => {\n    let result = '';\n    result += `linear-gradient(to bottom right, ${colors[0]}, 35%, transparent),`;\n    result += `linear-gradient(to bottom left, ${colors[1]}, 35%, transparent),`;\n    result += `linear-gradient(to top right, ${colors[2]}, 35%, transparent),`;\n    result += `linear-gradient(to top left, ${colors[3]}, 35%, transparent),`;\n    result += `linear-gradient(rgb(64, 64, 64), rgb(64, 64, 64));`;\n    return {\n      background: result,\n      light: luminance(colors[4][0] as number, colors[4][1] as number, colors[4][2] as number) > 0.4\n    };\n  })\n}\n"],"names":["fac","FastAverageColor","r","g","b","a","map","v","Math","pow","element","halfWidth","naturalWidth","halfHeight","naturalHeight","Promise","all","getColorAsync","width","height","then","color","hex","left","top","value","result","colors","background","light","luminance"],"mappings":"0CAEA,MAAMA,EAAM,IAAIC,aAEUC,EAAWC,EAAWC,SACxCC,EAAI,CAACH,EAAGC,EAAGC,GAAGE,KAAKC,OAClB,MACO,OAAUA,EAAI,MAAQC,KAAKC,OAAS,MAAS,MAAO,aAEpD,MAAPJ,EAAE,GAAqB,MAAPA,EAAE,GAAqB,MAAPA,EAAE,oBAGAK,SACnCC,EAAYD,EAAQE,aAAe,EACnCC,EAAaH,EAAQI,cAAgB,SAGpCC,QAAQC,IAAI,CAEjB,IAAID,eACEE,cAAcP,EAAS,CAACQ,MAAOP,EAAWQ,OAAQN,IAAaO,UAC7DC,GAAS,QAASA,KACZA,EAAMC,WAKpB,IAAIP,eACEE,cAAcP,EAAS,CAACQ,MAAOP,EAAWQ,OAAQN,EAAYU,KAAMZ,IAAYS,UAC9EC,GAAS,QAASA,KACZA,EAAMC,WAKpB,IAAIP,eACEE,cAAcP,EAAS,CAACQ,MAAOP,EAAWQ,OAAQN,EAAYW,IAAKX,IAAaO,UAC9EC,GAAS,QAASA,KACZA,EAAMC,WAKpB,IAAIP,eACEE,cAAcP,EAAS,CACzBQ,MAAOP,EACPQ,OAAQN,EACRU,KAAMZ,EACNa,IAAKX,IACJO,UACGC,GAAS,QAASA,KACZA,EAAMC,WAKpB,IAAIP,eACEE,cAAcP,GAASU,UACrBC,GAAS,UAAWA,KACdA,EAAMI,eAInBL,cACGM,EAAS,aACH,oCAAoCC,EAAO,4BAC3C,mCAAmCA,EAAO,4BAC1C,iCAAiCA,EAAO,4BACxC,gCAAgCA,EAAO,4BACvC,qDACH,CACLC,WAAYF,EACZG,MAAOC,EAAUH,EAAO,GAAG,GAAcA,EAAO,GAAG,GAAcA,EAAO,GAAG,IAAgB"}