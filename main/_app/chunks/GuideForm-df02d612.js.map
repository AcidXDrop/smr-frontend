{"version":3,"file":"GuideForm-df02d612.js","sources":["../../../../../src/lib/models/guides.ts","../../../../../src/lib/components/guides/GuideForm.svelte"],"sourcesContent":["import * as zod from 'zod';\n\nexport type GuideData = {\n  name: string;\n  short_description: string;\n  guide: string;\n};\n\nexport const guideSchema = zod.object({\n  name: zod.string().min(3).max(32),\n  short_description: zod.string().min(16).max(128),\n  guide: zod.string()\n});\n","<script lang=\"ts\">\n  import { createForm } from 'felte';\n  import { validator } from '@felte/validator-zod';\n  import { svelteReporter, ValidationMessage } from '@felte/reporter-svelte';\n  import type { GuideData } from '$lib/models/guides';\n  import { guideSchema } from '$lib/models/guides';\n  import { trimNonSchema } from '$lib/utils/forms';\n  import { markdown } from '$lib/utils/markdown';\n\n  export let onSubmit: (data: GuideData) => void;\n  export let initialValues: GuideData | undefined = undefined;\n  export let submitText = 'Create';\n\n  const { form, data } = createForm<GuideData>({\n    initialValues: initialValues,\n    extend: [validator, svelteReporter],\n    validateSchema: guideSchema,\n    onSubmit: (data) => onSubmit(trimNonSchema(data, guideSchema))\n  });\n\n  $: preview = ($data.guide as string) || '';\n</script>\n\n<form use:form>\n  <div class=\"grid grid-flow-row gap-6\">\n    <div class=\"grid grid-flow-row gap-2\">\n      <label for=\"name\">Name:</label>\n      <input id=\"name\" class=\"base-input\" name=\"name\" type=\"text\" placeholder=\"Name\" />\n      <ValidationMessage for=\"name\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    <div class=\"grid grid-flow-row gap-2\">\n      <label for=\"short_description\">Short Description:</label>\n      <input\n        id=\"short_description\"\n        class=\"base-input\"\n        name=\"short_description\"\n        type=\"text\"\n        placeholder=\"Short Description\"\n      />\n      <ValidationMessage for=\"short_description\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    <div class=\"grid gap-6 split\">\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <label for=\"guide\">Guide:</label>\n        <textarea class=\"base-input\" id=\"guide\" name=\"guide\" placeholder=\"Guide\" rows=\"10\" />\n        <ValidationMessage for=\"guide\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n      <div class=\"grid grid-flow-row gap-2 auto-rows-max\">\n        <span>Preview:</span>\n        {#await markdown(preview) then previewRendered}\n          <div class=\"markdown-content right\">{@html previewRendered}</div>\n        {/await}\n      </div>\n    </div>\n\n    <div>\n      <input type=\"submit\" value={submitText} class=\"px-4 py-2 rounded text-base bg-blue-500 cursor-pointer\" />\n    </div>\n  </div>\n</form>\n\n<style lang=\"postcss\">\n  .split {\n    grid-template-columns: 50% 50%;\n\n    & .right {\n      max-height: 75vh;\n      overflow: auto;\n    }\n  }\n</style>\n"],"names":["zod.object","zod.string","createForm","validator"],"mappings":"yXAQa,IAAcA,GAAW,CACpC,KAAMC,KAAa,IAAI,GAAG,IAAI,IAC9B,kBAAmBA,KAAa,IAAI,IAAI,IAAI,KAC5C,MAAOA,8BCkBiC,OAAW,wKAA7C,sCAAkC,OAAW,wDAcX,OAAW,wKAA7C,sCAAkC,OAAW,wDAST,OAAW,wKAA7C,sCAAkC,OAAW,mGAMF,wKAA3C,2CAA2C,uPA9BH,wBAAA,2GAca,wBAAA,+FASV,wBAAA,oIAMrC,GAAS,iEA/BD,sFAQa,8GAeV,4FAOb,wNA9BU,yNAQa,0QAeV,0OAOb,23BAQoB,2HAzClC,SACE,OACE,OACE,qBACA,kCAMF,OACE,qBACA,kCAYF,OACE,OACE,qBACA,oCAKF,OACE,sFAOJ,OACE,2PAPU,GAAS,+CAOS,kQAvDlC,eACA,gBAAA,WACA,aAAA,kBAEA,OAAA,QAAAC,IACA,gBACA,QAAAC,GAAA,IACA,eAAA,GACA,SAAA,GAAA,EAAA,GAAA,EAAA,uMAGA,EAAA,EAAA,OAAA"}