{"version":3,"file":"gql-c37f90f9.js","sources":["../../../../../src/lib/utils/gql.ts"],"sourcesContent":["import type { OperationStore } from '@urql/svelte/dist/types/operationStore';\nimport { get, readable } from 'svelte/store';\nimport type { Load } from '@sveltejs/kit';\nimport { browser } from '$app/env';\nimport { gqlClient } from '$lib/stores/global';\n\nexport const loadWaitForNoFetch = (queries: { [key: string]: OperationStore }): Load => {\n  return async function () {\n    if (browser) {\n      const result = Object.keys(queries).map((key) => {\n        const query = queries[key];\n\n        get(gqlClient)\n          .query(query.query, query.variables, query.context)\n          .toPromise()\n          .then((data) => {\n            query.set({\n              ...data,\n              fetching: false\n            });\n          })\n          .catch((err) => {\n            query.set({\n              fetching: false,\n              data: undefined,\n              error: err\n            });\n          });\n\n        query.set({\n          fetching: true\n        });\n\n        return [key, query];\n      });\n\n      return {\n        props: Object.fromEntries(result)\n      };\n    }\n\n    return {\n      props: Object.fromEntries(\n        await Promise.all(\n          Object.keys(queries).map((key) => {\n            const query = queries[key];\n            return get(gqlClient)\n              .query(query.query, query.variables, query.context)\n              .toPromise()\n              .then((data) => [key, readable(data)]);\n          })\n        )\n      )\n    };\n  };\n};\n"],"names":[],"mappings":"uFAMa,GAAqB,AAAC,GAC1B,gBAAkB,CACV,MACL,GAAS,OAAO,KAAK,GAAS,IAAI,AAAC,GAAQ,MACzC,GAAQ,EAAQ,YAElB,GACD,MAAM,EAAM,MAAO,EAAM,UAAW,EAAM,SAC1C,YACA,KAAK,AAAC,GAAS,GACR,IAAI,IACL,EACH,SAAU,OAGb,MAAM,AAAC,GAAQ,GACR,IAAI,CACR,SAAU,GACV,KAAM,OACN,MAAO,QAIP,IAAI,CACR,SAAU,KAGL,CAAC,EAAK,WAGR,CACL,MAAO,OAAO,YAAY"}