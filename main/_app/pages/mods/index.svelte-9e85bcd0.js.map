{"version":3,"file":"index.svelte-9e85bcd0.js","sources":["../../../../../../src/lib/components/mods/ModGrid.svelte","../../../../../../src/routes/mods/index.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { operationStore, query } from '@urql/svelte';\n  import { GetModsDocument, ModFields, Order } from '$lib/generated';\n  import ModCard from './ModCard.svelte';\n  import PageControls from '$lib/components/utils/PageControls.svelte';\n  import { writable } from 'svelte/store';\n  import { base } from '$app/paths';\n  import Button from '@smui/button';\n  import { Input } from '@smui/textfield';\n  import Paper from '@smui/paper';\n  import Fab from '@smui/fab';\n  import { Icon } from '@smui/common';\n  import { goto } from '$app/navigation';\n  import { page as storePage } from '$app/stores';\n  import { user } from '$lib/stores/user';\n  import FicsitCard from '$lib/components/general/FicsitCard.svelte';\n\n  export let colCount: 4 | 5 = 4;\n  export let newMod = false;\n  export let showSearch = false;\n\n  let search = $storePage.url.searchParams.get('q');\n\n  // TODO Selectable\n  const perPage = 40;\n  let order: Order = Order.Desc;\n  let orderBy: ModFields = ModFields.LastVersionDate;\n\n  const mods = operationStore(GetModsDocument, { offset: 0, limit: perPage, search, order, orderBy });\n\n  const page = writable(1);\n  let totalMods: number;\n\n  let searchField = search;\n  $: {\n    orderBy = search ? ModFields.Search : ModFields.LastVersionDate;\n\n    $mods.variables.search = search;\n    $mods.variables.orderBy = orderBy;\n    $mods.reexecute();\n  }\n\n  let timer: number;\n  $: {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      search = searchField;\n    }, 250) as unknown as number;\n  }\n\n  page.subscribe((p) => {\n    $mods.variables.offset = (p - 1) * perPage;\n    $mods.reexecute();\n  });\n\n  $: totalMods = $mods?.data?.getMods?.count || 0;\n\n  query(mods);\n\n  $: gridClasses =\n    colCount == 4\n      ? '3xl:grid-cols-4 2xl:grid-cols-3 lg:grid-cols-2 grid-cols-1'\n      : '3xl:grid-cols-3 2xl:grid-cols-2 grid-cols-1';\n\n  function handleKeyDown(event: CustomEvent | KeyboardEvent) {\n    if ((event as KeyboardEvent).key === 'Enter') {\n      goto(base + '/mods?q=' + search);\n    }\n  }\n</script>\n\n<div class=\"ml-auto flex flex-wrap justify-between\">\n  {#if newMod && $user !== null}\n    <Button variant=\"outlined\" href=\"{base}/new-mod\" class=\"mb-5\">New Mod</Button>\n  {/if}\n\n  {#if showSearch}\n    <div class=\"search-container mb-5 sm:px-4\">\n      <Paper class=\"search-paper mr-3\" elevation={6}>\n        <Icon class=\"material-icons\">search</Icon>\n        <Input bind:value={searchField} on:keypress={handleKeyDown} placeholder=\"Search\" />\n      </Paper>\n      <Fab on:click={() => goto(base + '/mods?q=' + search)} color=\"primary\" mini class=\"solo-fab\" aria-label=\"Search\">\n        <Icon class=\"material-icons\">arrow_forward</Icon>\n      </Fab>\n    </div>\n  {/if}\n\n  <div class=\"mb-5\">\n    <PageControls totalPages={Math.ceil(totalMods / perPage)} currentPage={page} />\n  </div>\n</div>\n\n{#if $mods.fetching}\n  <div class=\"grid {gridClasses} gap-4\">\n    {#each Array(perPage) as _}\n      <FicsitCard fake />\n    {/each}\n  </div>\n{:else if $mods.error}\n  <p>Oh no... {$mods.error.message}</p>\n{:else}\n  <div class=\"grid {gridClasses} gap-4\">\n    {#each $mods.data.getMods.mods as mod}\n      <ModCard {mod} />\n    {/each}\n  </div>\n{/if}\n\n<div class=\"mt-5 ml-auto flex justify-end\">\n  <div>\n    <PageControls totalPages={Math.ceil(totalMods / perPage)} currentPage={page} />\n  </div>\n</div>\n\n<style>\n  .search-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-grow: 1;\n  }\n\n  * :global(.search-paper) {\n    display: flex;\n    align-items: center;\n    flex-grow: 1;\n    max-width: 600px;\n    height: 48px;\n  }\n\n  * :global(.search-paper > *) {\n    display: inline-block;\n    margin: 0 12px;\n  }\n</style>\n","<script lang=\"ts\">\n  import ModGrid from '$lib/components/mods/ModGrid.svelte';\n  import MetaDescriptors from '$lib/components/utils/MetaDescriptors.svelte';\n</script>\n\n<svelte:head>\n  <MetaDescriptors description=\"Mods available from the Satisfactory Mod Repository\" title=\"Mods\" />\n</svelte:head>\n\n<ModGrid showSearch={true} newMod={true} colCount={4} />\n"],"names":["page"],"mappings":"gjCAyEsC,oUAA4B,uBAAA,qIAKhB,ibAD9C,oVAEiC,sBAAA,mNACV,yBAAA,wEAA0B,sPAA1B,sMAGU,6BAAA,sZAoB1B,KAAM,KAAK,QAAQ,0BAAxB,0QADc,sCAAlB,4EACS,KAAM,KAAK,QAAQ,uBAAxB,uHAAA,0DADc,4EACd,6IAHS,KAAM,MAAM,qCAAtB,0EAAA,uFAAH,4CAAa,KAAM,MAAM,wEALhB,MAAM,wBAAX,mOADc,sCAAlB,2FAAkB,4EACd,wnBAvBC,MAAU,OAAU,cAIpB,wCAauB,KAAK,KAAK,KAAY,eAAuB,sDAItE,MAAM,WAMD,KAAM,mEAYc,KAAK,KAAK,KAAY,eAAuB,+oBAxC3E,qDAiBE,iDAqBF,SACE,kCAtCK,MAAU,OAAU,mGAIpB,gIAauB,KAAK,KAAK,KAAY,wLAsBtB,KAAK,KAAK,KAAY,sOAvF5C,GAAU,+EAPL,WAAkB,MAClB,SAAS,OACT,aAAa,MAEpB,EAAS,EAAW,IAAI,aAAa,IAAI,KAIzC,EAAe,GAAM,KACrB,EAAqB,EAAU,qBAE7B,GAAO,GAAe,IAAmB,OAAQ,EAAG,MAAO,EAAS,SAAQ,QAAO,oCAEnFA,GAAO,GAAS,MAClB,GAEA,EAAc,EASd,EAQJA,EAAK,UAAW,QACd,EAAM,UAAU,OAAU,GAAI,GAAK,KACnC,EAAM,cAKR,GAAM,cAOiB,GAChB,EAAwB,MAAQ,SACnC,GAAK,EAAO,WAAa,iBAcJ,uBAEA,GAAK,EAAO,WAAa,gKAtChD,cAAa,QACb,EAAQ,oBACN,EAAS,IACR,8BAZH,EAAU,EAAS,EAAU,OAAS,EAAU,qBAEhD,EAAM,UAAU,OAAS,SACzB,EAAM,UAAU,QAAU,KAC1B,EAAM,gCAgBL,EAAY,GAAO,MAAM,SAAS,OAAS,wBAI3C,EACD,GAAY,EACR,6DACA,oVCrDa,UAAc,YAAgB"}