{"version":3,"file":"unapproved-versions.svelte-6e37cd57.js","sources":["../../../../../../src/routes/admin/unapproved-versions.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { ApproveVersionDocument, DenyVersionDocument, GetUnapprovedVersionsDocument } from '$lib/generated';\n  import { mutation, operationStore, query } from '@urql/svelte';\n  import { writable } from 'svelte/store';\n  import PageControls from '$lib/components/utils/PageControls.svelte';\n  import { API_REST } from '$lib/core';\n  import { base } from '$app/paths';\n  import MetaDescriptors from '$lib/components/utils/MetaDescriptors.svelte';\n\n  // TODO Selectable\n  const perPage = 20;\n\n  const versions = operationStore(GetUnapprovedVersionsDocument, {\n    filter: {\n      offset: 0,\n      limit: perPage\n    }\n  });\n\n  const page = writable(1);\n  let totalVersions: number;\n\n  page.subscribe((p) => ($versions.variables.filter.offset = (p - 1) * perPage));\n\n  $: totalVersions = $versions?.data?.getUnapprovedVersions?.count;\n\n  const approveVersionMut = mutation({\n    query: ApproveVersionDocument\n  });\n\n  const approveVersion = (versionId: string) => {\n    approveVersionMut({ versionId }).then(() => {\n      versions.reexecute();\n    });\n  };\n\n  const denyVersionMut = mutation({\n    query: DenyVersionDocument\n  });\n\n  const denyVersion = (versionId: string) => {\n    denyVersionMut({ versionId }).then(() => {\n      versions.reexecute();\n    });\n  };\n\n  query(versions);\n</script>\n\n<svelte:head>\n  <MetaDescriptors description=\"Unapproved mod versions\" title=\"Admin: Unapproved Versions\" />\n</svelte:head>\n\n{#if totalVersions}\n  <div class=\"mt-5 ml-auto flex justify-end\">\n    <PageControls totalPages={Math.ceil(totalVersions / perPage)} currentPage={page} />\n  </div>\n{/if}\n\n{#if $versions.fetching}\n  <p>Loading...</p>\n{:else if $versions.error}\n  <p>Oh no... {$versions.error.message}</p>\n{:else}\n  <div class=\"grid grid-cols-6 itemList\">\n    <!-- Header -->\n    <div>Mod</div>\n    <div>Version</div>\n    <div>Release Date</div>\n    <div><!-- Buttons --></div>\n\n    {#each $versions.data.getUnapprovedVersions.versions as version}\n      <div class=\"contents itemHeader\">\n        <div>{version.mod.name}</div>\n        <div>{version.version}</div>\n        <!-- TODO Pretty Date -->\n        <div>{version.created_at}</div>\n        <div class=\"grid grid-flow-col gap-4\">\n          <button\n            class=\"py-1 px-4 rounded text-base bg-green-600 text-center cursor-pointer\"\n            on:click={() => approveVersion(version.id)}>\n            Approve\n          </button>\n          <button\n            class=\"py-1 px-4 rounded text-base bg-red-600 text-center cursor-pointer\"\n            on:click={() => denyVersion(version.id)}>\n            Deny\n          </button>\n          <a\n            href={API_REST + '/mod/' + version.mod_id + '/versions/' + version.id + '/download'}\n            class=\"py-1 px-4 rounded text-base bg-yellow-600 text-center cursor-pointer\">Download</a>\n          <a\n            href={base + '/mod/' + version.mod_id + '/version/' + version.id}\n            class=\"py-1 px-4 rounded text-base bg-blue-500 text-center cursor-pointer\">View</a>\n        </div>\n      </div>\n    {/each}\n  </div>\n{/if}\n\n{#if totalVersions}\n  <div class=\"mt-5 ml-auto flex justify-end\">\n    <PageControls totalPages={Math.ceil(totalVersions / perPage)} currentPage={page} />\n  </div>\n{/if}\n\n<style lang=\"postcss\">\n  .itemList {\n    grid-template-columns: auto auto max-content auto;\n\n    & .itemHeader {\n      & > div {\n        @apply border-t-2 border-white p-4;\n      }\n\n      &:hover > div {\n        background: rgba(255, 255, 255, 0.25);\n      }\n    }\n  }\n</style>\n"],"names":["Math","ceil","ctx","perPage","ctx2","data","getUnapprovedVersions","versions","length","error","message","mod","name","version","created_at","API_REST","mod_id","id","base","fetching","_a","_b","operationStore","GetUnapprovedVersionsDocument","filter","offset","limit","page","writable","totalVersions","subscribe","$versions","variables","approveVersionMut","mutation","query","ApproveVersionDocument","approveVersion","versionId","then","reexecute","denyVersionMut","DenyVersionDocument","denyVersion","count"],"mappings":"kwBAuD8BA,KAAKC,KAAKC,KAAgBC,eAAuBD,8PAAjDF,KAAKC,KAAKG,KAAgBD,gJAgB7CD,KAAUG,KAAKC,sBAAsBC,8BAA1CC,kEALG,4BACA,gCACA,+JAFA,4DACA,gEACA,yWAGEJ,KAAUC,KAAKC,sBAAsBC,iBAA1CC,6HAAAA,yDATSN,KAAUO,MAAMC,mCAA1B,yDAAA,sFAAUN,KAAUK,MAAMC,kFAF1B,mDAAA,iJAaSR,MAAQS,IAAIC,UACZV,MAAQW,aAERX,MAAQY,yMAIiC,mCAKH,2BAKqC,+BAGF,+UAbhC,2EAKH,2EAKqC,+EAGF,4UAJrEC,EAAW,QAAUb,MAAQc,OAAS,aAAed,MAAQe,GAAK,8GAGlEC,EAAO,QAAUhB,MAAQc,OAAS,YAAcd,MAAQe,4aAnB5Df,MAAQS,IAAIC,6BACZV,MAAQW,gCAERX,MAAQY,mCAaJC,EAAW,QAAUb,MAAQc,OAAS,aAAed,MAAQe,GAAK,wCAGlEC,EAAO,QAAUhB,MAAQc,OAAS,YAAcd,MAAQe,uGAU5CjB,KAAKC,KAAKC,KAAgBC,eAAuBD,8PAAjDF,KAAKC,KAAKG,KAAgBD,oOAjDnDD,kCAMAE,KAAUe,WAELf,KAAUK,8BAuCfP,gWA/CAE,qLA+CAA,gRA1FGD,EAAU,+BAVDiB,EAAAC,QAYTd,EAAWe,EAAeC,GAC9BC,QACEC,OAAQ,EACRC,MAAOvB,gCAILwB,EAAOC,EAAS,OAClBC,IAECC,kBAAkBC,EAAUC,UAAUR,OAAOC,UAAc,GAAKtB,aAI/D8B,EAAoBC,GACxBC,MAAOC,IAGHC,SACgBC,UAAAA,IAAaC,aACtBC,gBAIPC,EAAiBP,GACrBC,MAAOO,IAGHC,SACaL,UAAAA,IAAaC,aACnBC,kBAIPjC,+CAtBHsB,EAAsD,WAAtCR,EAAe,WAAfD,EAAAW,MAAAA,SAAAA,EAAW1B,gBAAIe,SAAAA,EAAEd,iCAAqBe,SAAAA,EAAEuB,4BAwDjCP,EAAexB,EAAQI,OAKvB0B,EAAY9B,EAAQI"}