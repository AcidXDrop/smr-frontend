{"version":3,"file":"new-version.svelte-fd2bcaa0.js","sources":["../../../../../../../src/routes/mod/[modId]/new-version.svelte","../../../../../../../src/lib/utils/chunked-upload.ts"],"sourcesContent":["<svelte:head>\n  {#if !$mod.fetching && !$mod.error && $mod.data.getMod}\n    <MetaDescriptors \n      description=\"Creating a new version of mod {$mod.data.getMod.name}\"\n      title=\"New version of mod {$mod.data.getMod.name}\" \n  />\n  {/if}\n</svelte:head>\n\n<script lang=\"ts\" context=\"module\">\n  import {paramsToProps} from \"$lib/utils/routing\";\n\n  export const load = paramsToProps();\n</script>\n\n<script lang=\"ts\">\n  import {mutation, operationStore, query} from '@urql/svelte';\n  import Toast from \"$lib/components/general/Toast.svelte\";\n  import {goto} from '$app/navigation';\n  import type {VersionData} from \"$lib/models/versions\";\n  import VersionForm from \"$lib/components/versions/VersionForm.svelte\";\n  import {\n    CheckVersionUploadStateDocument,\n    CreateVersionDocument,\n    FinalizeCreateVersionDocument,\n    GetModReferenceDocument,\n    UploadVersionPartDocument\n  } from \"$lib/generated\";\n  import {writable} from \"svelte/store\";\n  import {chunkedUpload} from \"$lib/utils/chunked-upload\";\n  import type {UploadState} from \"$lib/utils/chunked-upload\";\n  import {base} from \"$app/paths\";\n  import MetaDescriptors from \"$lib/components/utils/MetaDescriptors.svelte\";\n\n  export let modId!: string;\n\n  const uploadStatus = writable<undefined | string>('');\n  const uploadPercent = writable<number>(0);\n\n  const uploadState = writable<UploadState>();\n\n  uploadState.subscribe((up) => {\n    if (up) {\n      if (up.uploaded === up.total) {\n        uploadStatus.set(`Processing...`);\n        uploadPercent.set(100);\n      } else {\n        uploadStatus.set(`Uploading: ${up.uploaded}/${up.total}`);\n        uploadPercent.set(up.uploaded / up.total * 100);\n      }\n    }\n  });\n\n  let errorMessage = '';\n  let errorToast = false;\n\n  const mod = operationStore(\n    GetModReferenceDocument,\n    {mod: modId}\n  );\n\n  query(mod);\n\n  const createVersion = mutation({\n    query: CreateVersionDocument\n  });\n\n  const uploadVersionPart = mutation({\n    query: UploadVersionPartDocument\n  });\n\n  const finalizeCreateVersion = mutation({\n    query: FinalizeCreateVersionDocument\n  });\n\n  const checkVersionUploadState = operationStore(\n    CheckVersionUploadStateDocument,\n    {\n      versionId: undefined,\n      modId\n    },\n    {\n      pause: true\n    }\n  );\n\n  query(checkVersionUploadState);\n\n  const onSubmit = async (data: VersionData) => {\n    return chunkedUpload(data.file, modId, {\n      changelog: data.changelog,\n      stability: data.stability,\n    }, uploadState, {\n      createVersion,\n      uploadVersionPart,\n      finalizeCreateVersion,\n      checkVersionUploadState\n    }).then(success => {\n      console.log({success});\n      // TODO Toast or something\n      goto(base + '/mod/' + modId + '/version/' + success.version.id);\n    }).catch(err => {\n      console.error(err);\n      errorMessage = 'Error creating version: ' + err.message;\n      errorToast = true;\n      uploadStatus.set('');\n    });\n  }\n\n  $: if (!errorToast) errorMessage = '';\n</script>\n\n<h1 class=\"text-4xl my-4 font-bold\">\n  New Version for\n  {#if $mod.fetching}\n    ...\n  {:else if !$mod.error}\n    {$mod.data.getMod.name}\n  {/if}\n</h1>\n\n{#if $mod.fetching}\n  <p>Loading...</p>\n{:else if $mod.error}\n  <p>Oh no... {$mod.error.message}</p>\n{:else}\n  <VersionForm onSubmit={onSubmit} modReference={$mod.data.getMod.mod_reference}/>\n\n  {#if $uploadStatus}\n    <div class=\"relative pt-4\">\n      <div class=\"flex mb-2 items-center justify-between\">\n        <div>\n          <span class=\"text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-white bg-yellow-600\">\n            { $uploadStatus }\n          </span>\n        </div>\n        <div class=\"text-right\">\n          <span class=\"text-xs font-semibold inline-block text-white\">{$uploadPercent.toFixed(0)}%</span>\n        </div>\n      </div>\n      <div class=\"overflow-hidden h-2 mb-4 text-xs flex rounded bg-gray-600\">\n        <div style=\"width: {$uploadPercent.toFixed(0)}%\"\n             class=\"shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-yellow-600\"></div>\n      </div>\n    </div>\n  {/if}\n{/if}\n\n<Toast bind:running={errorToast}>\n  <span>{errorMessage}</span>\n</Toast>\n","/* eslint-disable */\n\nimport type {File} from \"$lib/models/file\";\nimport type {ExecuteMutation, OperationStore} from \"@urql/svelte\";\nimport type {\n  CheckVersionUploadStateQuery,\n  CreateVersionMutation,\n  Exact,\n  FinalizeCreateVersionMutation,\n  NewVersion,\n  UploadVersionPartMutation\n} from \"$lib/generated\";\nimport type {Writable} from \"svelte/store\";\n\nexport type UploadState = {\n  total: number;\n  uploaded: number;\n}\n\nexport type ChunkedResponse = CheckVersionUploadStateQuery['checkVersionUploadState'];\n\nexport const chunkedUpload = async (file: File, modId: string, version: NewVersion, state: Writable<UploadState>, gql: {\n  createVersion: ExecuteMutation<CreateVersionMutation, Exact<{ modId: any }>>,\n  uploadVersionPart: ExecuteMutation<UploadVersionPartMutation, Exact<{ modId: any, versionId: any, part: number, file: any }>>,\n  finalizeCreateVersion: ExecuteMutation<FinalizeCreateVersionMutation, Exact<{ modId: any, versionId: any, version: NewVersion }>>,\n  checkVersionUploadState: OperationStore<CheckVersionUploadStateQuery, Exact<{ modId: any, versionId: any }>, CheckVersionUploadStateQuery>,\n}): Promise<ChunkedResponse> => {\n  const chunkSize = 10000000; // ~ 10MB\n\n  const chunksQuantity = Math.ceil(file.size / chunkSize);\n  const chunksQueue = new Array(chunksQuantity).fill(0).map((_, index) => index).reverse();\n\n  const upload = (chunk: Blob, chunkId: number, versionID: string) => {\n    return gql.uploadVersionPart({\n      modId: modId,\n      versionId: versionID,\n      part: chunkId,\n      file: chunk\n    });\n  };\n\n  const threadsQuantity = 10;\n  let activeConnections = 0;\n  let retries = 0;\n  const sendNext = (versionID: string) => {\n    if (activeConnections >= threadsQuantity) {\n      return;\n    }\n\n    if (!chunksQueue.length) {\n      return;\n    }\n\n    const chunkId = chunksQueue.pop();\n    const begin = chunkId * chunkSize;\n    const chunk = file.slice(begin, begin + chunkSize);\n\n    activeConnections += 1;\n\n    return Promise.all([\n      upload(chunk, chunkId + 1, versionID).then(() => {\n        activeConnections -= 1;\n\n        state.set({\n          total: chunksQuantity,\n          uploaded: (chunksQuantity - chunksQueue.length) - activeConnections\n        });\n\n        return sendNext(versionID);\n      }).catch(err => {\n        console.error('Upload failed:', err);\n        activeConnections -= 1;\n        chunksQueue.push(chunkId);\n        retries += 1;\n        if (retries < 5) {\n          return sendNext(versionID);\n        } else {\n          throw new Error('Failed uploading after 5 attempts');\n        }\n      }),\n      sendNext(versionID)\n    ]);\n  };\n\n  return gql.createVersion({modId}).then(async data => {\n    state.set({\n      total: chunksQuantity,\n      uploaded: 0\n    });\n\n    await sendNext(data.data.createVersion);\n\n    return data.data.createVersion;\n  }).then((versionID) => {\n    console.log('Finalizing', {versionID});\n\n    return gql.finalizeCreateVersion({\n      modId: modId,\n      versionId: versionID,\n      version: version\n    }).then(() => {\n      return new Promise<ChunkedResponse>((resolve, reject) => {\n        let tries = 0;\n        const interval = setInterval(() => {\n          if (tries == 60) {\n            clearInterval(interval);\n            return reject(new Error('Timed out waiting for mod processing'));\n          }\n\n          gql.checkVersionUploadState.reexecute({\n            requestPolicy: 'network-only',\n          });\n          tries++;\n        }, 10000);\n\n        gql.checkVersionUploadState.variables.versionId = versionID;\n        const sub = gql.checkVersionUploadState.subscribe(data => {\n          if (data.fetching) {\n            return;\n          }\n\n          if (data.error) {\n            clearInterval(interval);\n            reject(new Error(data.error.message));\n            setTimeout(sub);\n            return;\n          }\n\n          if (!data.data) {\n            return;\n          }\n\n          if (!data.data.checkVersionUploadState) {\n            return;\n          }\n\n          if (!data.data.checkVersionUploadState.version) {\n            return;\n          }\n\n          if (!data.data.checkVersionUploadState.version.id) {\n            return;\n          }\n\n          sub();\n          clearInterval(interval);\n          resolve(data.data.checkVersionUploadState);\n        });\n      });\n    });\n  }).catch(err => {\n    console.error(err);\n    throw err;\n  })\n}\n"],"names":["ctx","data","getMod","name","ctx2","mod_reference","error","message","toFixed","fetching","load","paramsToProps","__awaiter","this","thisArg","_arguments","P","generator","modId","uploadStatus","writable","uploadPercent","uploadState","subscribe","up","uploaded","total","set","errorMessage","errorToast","mod","operationStore","GetModReferenceDocument","createVersion","mutation","query","CreateVersionDocument","uploadVersionPart","UploadVersionPartDocument","finalizeCreateVersion","FinalizeCreateVersionDocument","checkVersionUploadState","CheckVersionUploadStateDocument","versionId","pause","async","file","version","state","gql","chunkSize","chunksQuantity","Math","ceil","size","chunksQueue","Array","fill","map","_","index","reverse","upload","chunk","chunkId","versionID","part","activeConnections","retries","sendNext","length","pop","begin","slice","Promise","all","then","catch","err","push","Error","log","resolve","reject","tries","interval","setInterval","reexecute","requestPolicy","variables","sub","id","chunkedUpload","changelog","stability","success","base"],"mappings":"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"}