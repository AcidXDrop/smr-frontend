{"version":3,"file":"index.svelte-6ba836cc.js","sources":["../../../../../../../src/lib/components/mods/ModInfo.svelte","../../../../../../../src/lib/components/mods/ModLatestVersions.svelte","../../../../../../../src/lib/components/mods/ModAuthors.svelte","../../../../../../../src/lib/components/mods/ModLogo.svelte","../../../../../../../src/lib/components/mods/ModDescription.svelte","../../../../../../../src/lib/components/mods/ModVersions.svelte","../../../../../../../src/routes/mod/[modId]/index.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import type { Mod } from '$lib/generated';\n\n  export let mod!: Pick<Mod, 'source_url' | 'created_at' | 'views' | 'downloads' | 'mod_reference'>;\n</script>\n\n<div class=\"text-lg\">\n  <h3 class=\"text-2xl my-4 font-bold\">Info</h3>\n  <span><strong>Source:</strong> <a class=\"underline text-yellow-500\" href={mod.source_url}>{mod.source_url}</a></span\n  ><br />\n  <!-- TODO Nice Date -->\n  <span><strong>Created:</strong> {mod.created_at}</span><br />\n  <span><strong>Views:</strong> {mod.views}</span><br />\n  <span><strong>Downloads:</strong> {mod.downloads}</span><br />\n  <span><strong>Reference:</strong> {mod.mod_reference}</span><br />\n</div>\n","<script lang=\"ts\">\n  import type { Version } from '$lib/generated';\n  import Icon from '@iconify/svelte';\n  import alphaIcon from '@iconify/icons-mdi/alpha.js';\n  import betaIcon from '@iconify/icons-mdi/beta.js';\n  import releaseIcon from '@iconify/icons-mdi/alert-decagram.js';\n  import downloadIcon from '@iconify/icons-mdi/download.js';\n  import { API_REST } from '$lib/core';\n  import { base } from '$app/paths';\n\n  type ILatestVersions = {\n    alpha?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n    beta?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n    release?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n  };\n\n  const stabilities = {\n    alpha: alphaIcon,\n    beta: betaIcon,\n    release: releaseIcon\n  };\n\n  export let latestVersions!: ILatestVersions;\n  export let modId!: string;\n</script>\n\n<div class=\"grid grid-flow-row gap-y-6\">\n  <h3 class=\"text-2xl my-4 font-bold\">Latest Versions</h3>\n\n  {#each Object.keys(stabilities) as stability}\n    {#if latestVersions[stability]}\n      <div class=\"version\">\n        <div class=\"text-4xl w-14 h-14 p-2.5\">\n          <Icon icon={stabilities[stability]} inline={true} class=\"inline-block\" />\n        </div>\n        <div class=\"grid grid-flow-row\">\n          <a href=\"{base}/mod/{modId}/version/{latestVersions[stability].id}/\" class=\"text-yellow-500 underline\"\n            >Version {latestVersions[stability].version}</a\n          >\n          <div>{latestVersions[stability].created_at}</div>\n        </div>\n        <div class=\"text-3xl w-14 h-14 p-2.5\">\n          <a\n            href={API_REST + '/mod/' + modId + '/versions/' + latestVersions[stability].id + '/download'}\n            class=\"text-yellow-500 underline\"\n          >\n            <Icon icon={downloadIcon} inline={true} class=\"inline-block\" />\n          </a>\n        </div>\n      </div>\n    {/if}\n  {/each}\n</div>\n\n<style lang=\"postcss\">\n  .version {\n    @apply grid grid-flow-col text-lg gap-x-4;\n    grid-template-columns: max-content auto max-content;\n  }\n</style>\n","<script lang=\"ts\">\n  import type { User, UserMod } from '$lib/generated';\n  import { assets, base } from '$app/paths';\n\n  export let authors: Array<\n    Pick<UserMod, 'role'> & {\n      user: Pick<User, 'id' | 'username' | 'avatar'>;\n    }\n  >;\n</script>\n\n<div class=\"grid grid-flow-row gap-y-6\">\n  <h3 class=\"text-2xl my-4 font-bold\">Authors</h3>\n\n  <div class=\"grid auto-rows-min text-lg gap-y-4\">\n    {#each authors as author}\n      <div class=\"grid grid-flow-col auto-cols-max gap-x-4\">\n        <div\n          class=\"rounded-full bg-cover w-14 h-14\"\n          style={`background-image: url(\"${author.user.avatar || assets + '/images/no_image.png'}\")`}\n        />\n        <div class=\"grid grid-flow-row\">\n          <a href=\"{base}/user/{author.user.id}/\" class=\"text-yellow-500 underline\">{author.user.username}</a>\n          <div>{author.role.charAt(0).toUpperCase() + author.role.slice(1).toLowerCase()}</div>\n        </div>\n      </div>\n    {/each}\n  </div>\n</div>\n","<script lang=\"ts\">\n  import { assets } from '$app/paths';\n\n  export let modLogo!: string;\n  export let modName!: string;\n\n  $: logo = modLogo || assets + '/images/no_image.png';\n\n  // TODO Outdated Flag\n</script>\n\n<div>\n  <img class=\"rounded-lg max-w-lg\" src={logo} alt=\"Logo for {modName}\" />\n</div>\n","<script lang=\"ts\">\n  import type { Mod } from '$lib/generated';\n  import { markdown } from '$lib/utils/markdown';\n\n  export let mod!: Pick<Mod, 'full_description' | 'short_description'>;\n\n  $: description = mod.full_description ? markdown(mod.full_description) : mod.short_description;\n</script>\n\n<div class=\"markdown-content\">\n  {#await description then descriptionRendered}\n    <p>{@html descriptionRendered}</p>\n  {/await}\n</div>\n","<script lang=\"ts\">\n  import { GetModVersionsDocument } from '$lib/generated';\n  import { operationStore, query } from '@urql/svelte';\n  import Icon from '@iconify/svelte';\n  import downloadIcon from '@iconify/icons-mdi/download.js';\n  import { API_REST } from '$lib/core';\n  import { markdown } from '$lib/utils/markdown';\n  import { base } from '$app/paths';\n\n  export let modId!: string;\n\n  let expandedVersions = new Set<string>();\n\n  // TODO Pagination\n  const versions = operationStore(GetModVersionsDocument, {\n    mod: modId,\n    limit: 100,\n    offset: 0\n  });\n\n  query(versions);\n\n  const toggleRow = (versionId: string) => {\n    if (expandedVersions.has(versionId)) {\n      expandedVersions.delete(versionId);\n    } else {\n      expandedVersions.add(versionId);\n    }\n    expandedVersions = expandedVersions;\n  };\n</script>\n\n{#if $versions.fetching}\n  <p>Loading...</p>\n{:else if $versions.error}\n  <p>Oh no... {$versions.error.message}</p>\n{:else}\n  <div class=\"grid grid-cols-6 versions\">\n    <!-- Header -->\n    <div>Version</div>\n    <div>Stability</div>\n    <div>SML Version</div>\n    <div>Downloads</div>\n    <div>Upload Date</div>\n    <div><!-- Buttons --></div>\n\n    {#each $versions.data.getMod.versions as version}\n      <div class=\"contents version-header\" on:click={() => toggleRow(version.id)}>\n        <div>{version.version}</div>\n        <div>{version.stability}</div>\n        <div>{version.sml_version}</div>\n        <div>{version.downloads}</div>\n        <!-- TODO Pretty Date -->\n        <div>{version.created_at}</div>\n        <div class=\"grid grid-flow-col gap-4\">\n          <a\n            href={base + '/mod/' + modId + '/version/' + version.id}\n            class=\"py-1 px-4 rounded text-base bg-blue-500 text-center\">View</a\n          >\n          <a\n            href={API_REST + '/mod/' + modId + '/versions/' + version.id + '/download'}\n            class=\"py-1 px-4 rounded text-base bg-green-600 text-center\">Download</a\n          >\n          <!-- TODO SMM -->\n          <a href={base} class=\"py-1 px-4 rounded text-base bg-yellow-600 text-center\">\n            <span>Install</span>\n            <Icon icon={downloadIcon} inline={true} class=\"inline-block\" />\n          </a>\n        </div>\n      </div>\n\n      {#if expandedVersions.has(version.id)}\n        <!-- TODO Pretty Bytes -->\n        <div class=\"col-span-3 p-2\">Size: {version.size}</div>\n        <div class=\"col-span-3 p-2\">Hash: {version.hash}</div>\n\n        <div class=\"col-span-6 p-2 markdown-content\">\n          {#await markdown(version.changelog) then changelogRendered}\n            {@html changelogRendered}\n          {/await}\n        </div>\n      {/if}\n    {/each}\n  </div>\n{/if}\n\n<style lang=\"postcss\">\n  .versions {\n    grid-template-columns: auto auto auto auto max-content auto;\n\n    & .version-header {\n      & > div {\n        @apply border-t-2 border-white p-4;\n      }\n\n      &:hover > div {\n        @apply cursor-pointer;\n        background: rgba(255, 255, 255, 0.25);\n      }\n    }\n  }\n</style>\n","<script lang=\"ts\" context=\"module\">\n  import { paramsToProps } from '$lib/utils/routing';\n  import { operationStore } from '@urql/svelte';\n  import { GetModDocument } from '$lib/generated';\n  import { loadWaitForNoFetch } from '$lib/utils/gql';\n  import MetaDescriptors from '$lib/components/utils/MetaDescriptors.svelte';\n\n  const modQ = operationStore(GetModDocument, { mod: undefined });\n\n  export const load = paramsToProps(async (input) => {\n    modQ.variables.mod = input.page.params.modId;\n    return loadWaitForNoFetch({\n      mod: modQ\n    })(input);\n  });\n</script>\n\n<script lang=\"ts\">\n  import { DeleteModDocument } from '$lib/generated';\n  import { mutation, query } from '@urql/svelte';\n  import ModInfo from '$lib/components/mods/ModInfo.svelte';\n  import ModLatestVersions from '$lib/components/mods/ModLatestVersions.svelte';\n  import ModAuthors from '$lib/components/mods/ModAuthors.svelte';\n  import ModLogo from '$lib/components/mods/ModLogo.svelte';\n  import ModDescription from '$lib/components/mods/ModDescription.svelte';\n  import ModVersions from '$lib/components/mods/ModVersions.svelte';\n  import { user } from '$lib/stores/user';\n  import { goto } from '$app/navigation';\n  import { writable } from 'svelte/store';\n  import Dialog from '$lib/components/general/Dialog.svelte';\n  import Toast from '$lib/components/general/Toast.svelte';\n  import { base } from '$app/paths';\n  import { browser } from '$app/env';\n\n  export let modId!: string;\n  export let mod: typeof modQ;\n\n  let versionsTab = false;\n\n  let errorMessage = '';\n  let errorToast = false;\n\n  const deleteMod = mutation({\n    query: DeleteModDocument\n  });\n\n  $: canUserEdit =\n    $user?.roles?.deleteContent || $mod?.data?.getMod?.authors?.findIndex((author) => author.user_id == $user?.id) >= 0;\n\n  const deleteDialogOpen = writable<boolean>(false);\n\n  const deleteModFn = () => {\n    deleteMod({ modId }).then((value) => {\n      if (value.error) {\n        console.error(value.error.message);\n        errorMessage = 'Error deleting mod: ' + value.error.message;\n        errorToast = true;\n      } else {\n        // TODO Toast or something\n        goto(base + '/mods');\n      }\n    });\n  };\n\n  if (browser) {\n    query(mod);\n  }\n</script>\n\n<svelte:head>\n  {#if !$mod.fetching && !$mod.error && $mod.data.getMod}\n    <MetaDescriptors\n      description={$mod.data.getMod.short_description}\n      title={$mod.data.getMod.name}\n      image={$mod.data.getMod.logo}\n    />\n  {/if}\n</svelte:head>\n\n{#if $mod.fetching}\n  <p>Loading...</p>\n{:else if $mod.error}\n  <p>Oh no... {$mod.error.message}</p>\n{:else if $mod.data.getMod}\n  <div class=\"grid gap-8 grid-auto-max\">\n    <div class=\"grid grid-cols-1 auto-rows-min gap-8\">\n      <div class=\"grid grid-flow-col grid-auto-max h-auto gap-4 items-center\">\n        <h1 class=\"text-4xl my-4 font-bold\">{$mod.data.getMod.name}</h1>\n\n        {#if canUserEdit}\n          <button\n            class=\"py-2 px-4 rounded text-base bg-yellow-600\"\n            on:click={() => goto(base + '/mod/' + modId + '/edit')}\n          >\n            Edit\n          </button>\n          <button class=\"py-2 px-4 rounded text-base bg-red-500\" on:click={() => deleteDialogOpen.set(true)}>\n            Delete\n          </button>\n          <button\n            class=\"py-2 px-4 rounded text-base bg-green-600\"\n            on:click={() => goto(base + '/mod/' + modId + '/new-version')}\n          >\n            New Version\n          </button>\n        {/if}\n\n        <button class=\"py-2 px-4 rounded text-base bg-blue-500\" on:click={() => (versionsTab = !versionsTab)}>\n          {#if !versionsTab}\n            Versions\n          {:else}\n            Description\n          {/if}\n        </button>\n      </div>\n      {#if !versionsTab}\n        <ModDescription mod={$mod.data.getMod} />\n      {:else}\n        <ModVersions modId={$mod.data.getMod.id} />\n      {/if}\n    </div>\n    <div class=\"grid grid-cols-1 auto-rows-min gap-8\">\n      <ModLogo modLogo={$mod.data.getMod.logo} modName={$mod.data.getMod.name} />\n      <ModInfo mod={$mod.data.getMod} />\n      <ModLatestVersions modId={$mod.data.getMod.id} latestVersions={$mod.data.getMod.latestVersions} />\n      <ModAuthors authors={$mod.data.getMod.authors} />\n    </div>\n  </div>\n\n  <Dialog bind:open={$deleteDialogOpen}>\n    <div class=\"grid grid-flow-row gap-4\">\n      <h3 class=\"text-2xl font-bold\">Delete Mod?</h3>\n\n      <span>Are you sure you wish to delete this mod</span>\n\n      <button class=\"py-1 px-4 rounded text-base bg-yellow-600\" on:click={() => deleteDialogOpen.set(false)}>\n        Cancel\n      </button>\n      <button class=\"py-1 px-4 rounded text-base bg-red-500\" on:click={() => deleteModFn()}> Delete </button>\n    </div>\n  </Dialog>\n\n  <Toast bind:running={errorToast}>\n    <span>{errorMessage}</span>\n  </Toast>\n{:else}\n  <!-- TODO Better 404 -->\n  404\n{/if}\n\n<style lang=\"postcss\">\n  .grid-auto-max {\n    grid-template-columns: auto max-content max-content max-content max-content;\n  }\n</style>\n"],"names":["downloadIcon","alphaIcon","betaIcon","releaseIcon"],"mappings":"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"}