{"version":3,"file":"index.svelte-41742a29.js","sources":["../../../../../../../src/lib/components/mods/ModInfo.svelte","../../../../../../../src/lib/components/mods/ModLatestVersions.svelte","../../../../../../../src/lib/components/mods/ModAuthors.svelte","../../../../../../../src/lib/components/mods/ModLogo.svelte","../../../../../../../src/lib/components/mods/ModDescription.svelte","../../../../../../../src/lib/components/mods/ModVersions.svelte","../../../../../../../src/routes/mod/[modId]/index.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import type { Mod } from '$lib/generated';\n  import Card, { Content } from '@smui/card';\n\n  export let mod!: Pick<Mod, 'source_url' | 'created_at' | 'views' | 'downloads' | 'mod_reference'>;\n</script>\n\n<Card>\n  <Content>\n    <div class=\"text-lg\">\n      <h3 class=\"text-2xl my-4 font-bold\">Info</h3>\n      <span\n        ><strong>Source:</strong> <a class=\"underline text-yellow-500\" href={mod.source_url}>{mod.source_url}</a></span\n      ><br />\n      <!-- TODO Nice Date -->\n      <span><strong>Created:</strong> {mod.created_at}</span><br />\n      <span><strong>Views:</strong> {mod.views}</span><br />\n      <span><strong>Downloads:</strong> {mod.downloads}</span><br />\n      <span><strong>Reference:</strong> {mod.mod_reference}</span><br />\n    </div>\n  </Content>\n</Card>\n","<script lang=\"ts\">\n  import type { Version } from '$lib/generated';\n  import { API_REST } from '$lib/core';\n  import { base } from '$app/paths';\n  import Card, { Content } from '@smui/card';\n  import { Icon } from '@smui/common';\n\n  type ILatestVersions = {\n    alpha?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n    beta?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n    release?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n  };\n\n  const stabilities = {\n    release: 'new_releases',\n    beta: 'warning',\n    alpha: 'report'\n  };\n\n  export let latestVersions!: ILatestVersions;\n  export let modId!: string;\n</script>\n\n<Card>\n  <Content>\n    <div class=\"grid grid-flow-row gap-y-2\">\n      <h3 class=\"text-2xl my-4 font-bold\">Latest Versions</h3>\n\n      {#each Object.keys(stabilities) as stability}\n        {#if latestVersions[stability]}\n          <div class=\"version\">\n            <div class=\"text-4xl w-14 h-14 p-2.5\">\n              <Icon class=\"material-icons\">{stabilities[stability]}</Icon>\n            </div>\n            <div class=\"grid grid-flow-row\">\n              <a href=\"{base}/mod/{modId}/version/{latestVersions[stability].id}/\" class=\"text-yellow-500 underline\"\n                >Version {latestVersions[stability].version}</a\n              >\n              <div>{latestVersions[stability].created_at}</div>\n            </div>\n            <div class=\"text-3xl w-14 h-14 p-2.5\">\n              <a\n                href={API_REST + '/mod/' + modId + '/versions/' + latestVersions[stability].id + '/download'}\n                class=\"text-yellow-500 underline\"\n              >\n                <Icon class=\"material-icons\">download</Icon>\n              </a>\n            </div>\n          </div>\n        {/if}\n      {/each}\n    </div>\n  </Content>\n</Card>\n\n<style lang=\"postcss\">\n  .version {\n    @apply grid grid-flow-col text-lg gap-x-4;\n    grid-template-columns: max-content auto max-content;\n  }\n</style>\n","<script lang=\"ts\">\n  import type { User, UserMod } from '$lib/generated';\n  import { assets, base } from '$app/paths';\n  import Card, { Content } from '@smui/card';\n\n  export let authors: Array<\n    Pick<UserMod, 'role'> & {\n      user: Pick<User, 'id' | 'username' | 'avatar'>;\n    }\n  >;\n</script>\n\n<Card>\n  <Content>\n    <div class=\"grid grid-flow-row gap-y-2\">\n      <h3 class=\"text-2xl my-4 font-bold\">Authors</h3>\n\n      <div class=\"grid auto-rows-min text-lg gap-y-4\">\n        {#each authors as author}\n          <div class=\"grid grid-flow-col auto-cols-max gap-x-4\">\n            <div\n              class=\"rounded-full bg-cover w-14 h-14\"\n              style={`background-image: url(\"${author.user.avatar || assets + '/images/no_image.png'}\")`}\n            />\n            <div class=\"grid grid-flow-row\">\n              <a href=\"{base}/user/{author.user.id}/\" class=\"text-yellow-500 underline\">{author.user.username}</a>\n              <div>{author.role.charAt(0).toUpperCase() + author.role.slice(1).toLowerCase()}</div>\n            </div>\n          </div>\n        {/each}\n      </div>\n    </div>\n  </Content>\n</Card>\n","<script lang=\"ts\">\n  import { assets } from '$app/paths';\n\n  export let modLogo!: string;\n  export let modName!: string;\n\n  $: logo = modLogo || assets + '/images/no_image.png';\n\n  // TODO Outdated Flag\n</script>\n\n<div>\n  <img class=\"rounded-lg sm:max-w-lg max-w-full\" src={logo} alt=\"Logo for {modName}\" />\n</div>\n","<script lang=\"ts\">\n  import type { Mod } from '$lib/generated';\n  import { markdown } from '$lib/utils/markdown';\n  import Card, { Content } from '@smui/card';\n\n  export let mod!: Pick<Mod, 'full_description' | 'short_description'>;\n\n  $: description = mod.full_description ? markdown(mod.full_description) : mod.short_description;\n</script>\n\n<Card>\n  <Content>\n    <div class=\"markdown-content break-words\">\n      {#await description then descriptionRendered}\n        <p>{@html descriptionRendered}</p>\n      {/await}\n    </div>\n  </Content>\n</Card>\n","<script lang=\"ts\">\n  import { GetModVersionsDocument } from '$lib/generated';\n  import { operationStore, query } from '@urql/svelte';\n  import { API_REST } from '$lib/core';\n  import { markdown } from '$lib/utils/markdown';\n  import { base } from '$app/paths';\n  import Card, { Content } from '@smui/card';\n  import DataTable, { Head, Body, Row, Cell } from '@smui/data-table';\n  import Button, { Label, Icon } from '@smui/button';\n\n  export let modId!: string;\n\n  let expandedVersions = new Set<string>();\n\n  // TODO Pagination\n  const versions = operationStore(GetModVersionsDocument, {\n    mod: modId,\n    limit: 100,\n    offset: 0\n  });\n\n  query(versions);\n\n  const toggleRow = (versionId: string) => {\n    if (expandedVersions.has(versionId)) {\n      expandedVersions.delete(versionId);\n    } else {\n      expandedVersions.add(versionId);\n    }\n    expandedVersions = expandedVersions;\n  };\n</script>\n\n<Card>\n  {#if $versions.fetching}\n    <Content>Loading...</Content>\n  {:else if $versions.error}\n    <Content>Oh no... {$versions.error.message}</Content>\n  {:else}\n    <DataTable class=\"max-w-full\">\n      <Head>\n        <Row>\n          <Cell>Version</Cell>\n          <Cell>Stability</Cell>\n          <Cell>SML Version</Cell>\n          <Cell>Downloads</Cell>\n          <Cell>Upload Date</Cell>\n          <Cell><!-- Buttons --></Cell>\n        </Row>\n      </Head>\n      <Body>\n        {#each $versions.data.getMod.versions as version}\n          <Row on:click={() => toggleRow(version.id)}>\n            <Cell>{version.version}</Cell>\n            <Cell>{version.stability}</Cell>\n            <Cell>{version.sml_version}</Cell>\n            <Cell>{version.downloads}</Cell>\n            <!-- TODO Pretty Date -->\n            <Cell>{version.created_at}</Cell>\n            <Cell>\n              <div class=\"grid grid-flow-col gap-4\">\n                <Button variant=\"outlined\" href={base + '/mod/' + modId + '/version/' + version.id}>View</Button>\n                <Button variant=\"outlined\" href={API_REST + '/mod/' + modId + '/versions/' + version.id + '/download'}\n                  >Download</Button\n                >\n                <!-- TODO SMM -->\n                <Button variant=\"outlined\" href={base}>\n                  <Label>Install</Label>\n                  <Icon class=\"material-icons\">download</Icon>\n                </Button>\n              </div>\n            </Cell>\n          </Row>\n\n          {#if expandedVersions.has(version.id)}\n            <Row>\n              <Cell colspan={6}>\n                <!-- TODO Pretty Bytes -->\n                <div class=\"col-span-3 p-2\">Size: {version.size}</div>\n                <div class=\"col-span-3 p-2\">Hash: {version.hash}</div>\n\n                <div class=\"col-span-6 p-2 markdown-content\">\n                  {#await markdown(version.changelog) then changelogRendered}\n                    {@html changelogRendered}\n                  {/await}\n                </div>\n              </Cell>\n            </Row>\n          {/if}\n        {/each}\n      </Body>\n    </DataTable>\n  {/if}\n</Card>\n","<script lang=\"ts\" context=\"module\">\n  import { paramsToProps } from '$lib/utils/routing';\n  import { operationStore } from '@urql/svelte';\n  import { GetModDocument } from '$lib/generated';\n  import { loadWaitForNoFetch } from '$lib/utils/gql';\n\n  const modQ = operationStore(GetModDocument, { mod: undefined });\n\n  export const load = paramsToProps(async (input) => {\n    modQ.variables.mod = input.page.params.modId;\n    return loadWaitForNoFetch({\n      mod: modQ\n    })(input);\n  });\n</script>\n\n<script lang=\"ts\">\n  import { DeleteModDocument } from '$lib/generated';\n  import { mutation, query } from '@urql/svelte';\n  import ModInfo from '$lib/components/mods/ModInfo.svelte';\n  import ModLatestVersions from '$lib/components/mods/ModLatestVersions.svelte';\n  import ModAuthors from '$lib/components/mods/ModAuthors.svelte';\n  import ModLogo from '$lib/components/mods/ModLogo.svelte';\n  import ModDescription from '$lib/components/mods/ModDescription.svelte';\n  import ModVersions from '$lib/components/mods/ModVersions.svelte';\n  import { user } from '$lib/stores/user';\n  import { goto } from '$app/navigation';\n  import { writable } from 'svelte/store';\n  import Toast from '$lib/components/general/Toast.svelte';\n  import { base } from '$app/paths';\n  import { browser } from '$app/env';\n  import MetaDescriptors from '$lib/components/utils/MetaDescriptors.svelte';\n  import Button from '@smui/button';\n  import Dialog, { Title, Content as DialogContent } from '@smui/dialog';\n\n  export let modId!: string;\n  export let mod: typeof modQ;\n\n  let versionsTab = false;\n\n  let errorMessage = '';\n  let errorToast = false;\n\n  const deleteMod = mutation({\n    query: DeleteModDocument\n  });\n\n  $: canUserEdit =\n    $user?.roles?.deleteContent || $mod?.data?.getMod?.authors?.findIndex((author) => author.user_id == $user?.id) >= 0;\n\n  const deleteDialogOpen = writable<boolean>(false);\n\n  const deleteModFn = () => {\n    deleteMod({ modId }).then((value) => {\n      if (value.error) {\n        console.error(value.error.message);\n        errorMessage = 'Error deleting mod: ' + value.error.message;\n        errorToast = true;\n      } else {\n        // TODO Toast or something\n        goto(base + '/mods');\n      }\n    });\n  };\n\n  if (browser) {\n    query(mod);\n  }\n</script>\n\n<svelte:head>\n  {#if !$mod.fetching && !$mod.error && $mod.data.getMod}\n    <MetaDescriptors\n      description={$mod.data.getMod.short_description}\n      title={$mod.data.getMod.name}\n      image={$mod.data.getMod.logo}\n    />\n  {/if}\n</svelte:head>\n\n{#if $mod.fetching}\n  <p>Loading...</p>\n{:else if $mod.error}\n  <p>Oh no... {$mod.error.message}</p>\n{:else if $mod.data.getMod}\n  <div class=\"grid gap-8 grid-auto-max xlx:grid-flow-row\">\n    <div class=\"grid grid-cols-1 auto-rows-min gap-4\">\n      <div class=\"flex flex-wrap h-auto justify-between\">\n        <h1 class=\"text-4xl my-4 font-bold\">{$mod.data.getMod.name}</h1>\n\n        <div>\n          {#if canUserEdit}\n            <Button variant=\"outlined\" on:click={() => goto(base + '/mod/' + modId + '/edit')}>Edit</Button>\n            <Button variant=\"outlined\" on:click={() => deleteDialogOpen.set(true)}>Delete</Button>\n            <Button variant=\"outlined\" on:click={() => goto(base + '/mod/' + modId + '/new-version')}\n              >New Version</Button\n            >\n          {/if}\n\n          <Button variant=\"outlined\" on:click={() => (versionsTab = !versionsTab)}>\n            {#if !versionsTab}\n              Versions\n            {:else}\n              Description\n            {/if}\n          </Button>\n        </div>\n      </div>\n      {#if !versionsTab}\n        <ModDescription mod={$mod.data.getMod} />\n      {:else}\n        <ModVersions modId={$mod.data.getMod.id} />\n      {/if}\n    </div>\n    <div class=\"grid grid-cols-1 auto-rows-min gap-8\">\n      <ModLogo modLogo={$mod.data.getMod.logo} modName={$mod.data.getMod.name} />\n      <ModInfo mod={$mod.data.getMod} />\n      <ModLatestVersions modId={$mod.data.getMod.id} latestVersions={$mod.data.getMod.latestVersions} />\n      <ModAuthors authors={$mod.data.getMod.authors} />\n    </div>\n  </div>\n\n  <Dialog bind:open={$deleteDialogOpen}>\n    <Title>Delete Mod?</Title>\n    <DialogContent>\n      <div class=\"grid grid-flow-row gap-4\">\n        <span>Are you sure you wish to delete this mod</span>\n\n        <Button variant=\"outlined\" on:click={() => deleteDialogOpen.set(false)}>Cancel</Button>\n        <Button variant=\"outlined\" on:click={() => deleteModFn()}>Delete</Button>\n      </div>\n    </DialogContent>\n  </Dialog>\n\n  <Toast bind:running={errorToast}>\n    <span>{errorMessage}</span>\n  </Toast>\n{:else}\n  <!-- TODO Better 404 -->\n  404\n{/if}\n\n<style lang=\"postcss\">\n  @media (min-width: 1279px) {\n    .grid-auto-max {\n      grid-template-columns: auto max-content;\n    }\n  }\n</style>\n"],"names":[],"mappings":"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"}