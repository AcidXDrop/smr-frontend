{"version":3,"file":"__layout.svelte-1b42b0f9.js","sources":["../../../../../src/lib/core/graphql.ts","../../../../../src/lib/components/auth/LoginDialog.svelte","../../../../../src/routes/__layout.svelte"],"sourcesContent":["import schema from '$lib/generated/graphql.schema.urql.json';\nimport type { Client } from '@urql/svelte';\nimport { createClient } from '@urql/svelte';\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport { persistedFetchExchange } from '@urql/exchange-persisted-fetch';\nimport { multipartFetchExchange } from '@urql/exchange-multipart-fetch';\nimport { API_GRAPHQL } from './api';\nimport { userToken } from '$lib/stores/user';\nimport { authExchange } from '@urql/exchange-auth';\nimport type { Operation } from '@urql/core';\nimport type { LoadInput } from '@sveltejs/kit/types/page';\nimport { get } from 'svelte/store';\n\ninterface SMRAuthState {\n  token: string | null;\n}\n\nexport const initializeGraphQLClient = (fetch?: LoadInput['fetch']): Client => {\n  return createClient({\n    url: API_GRAPHQL,\n    fetch,\n    exchanges: [\n      cacheExchange({\n        schema,\n        keys: {\n          GetMods: () => null,\n          LatestVersions: () => null,\n          UserMod: () => null,\n          GetGuides: () => null,\n          OAuthOptions: () => null,\n          UserRoles: () => null\n        },\n        updates: {\n          Mutation: {\n            deleteGuide(_result, args, cache) {\n              cache.invalidate({\n                __typename: 'Guide',\n                id: args.guideId as string\n              });\n            },\n            deleteMod(_result, args, cache) {\n              cache.invalidate({\n                __typename: 'Mod',\n                id: args.modId as string\n              });\n            },\n            approveMod(_result, args, cache) {\n              cache.invalidate({\n                __typename: 'Mod',\n                id: args.modId as string\n              });\n            },\n            denyMod(_result, args, cache) {\n              cache.invalidate({\n                __typename: 'Mod',\n                id: args.modId as string\n              });\n            },\n            approveVersion(_result, args, cache) {\n              cache.invalidate({\n                __typename: 'Version',\n                id: args.versionId as string\n              });\n            },\n            denyVersion(_result, args, cache) {\n              cache.invalidate({\n                __typename: 'Version',\n                id: args.versionId as string\n              });\n            },\n            deleteSMLVersion(_result, args, cache) {\n              cache.invalidate({\n                __typename: 'SMLVersion',\n                id: args.smlVersionId as string\n              });\n            },\n            deleteVersion(_result, args, cache) {\n              cache.invalidate({\n                __typename: 'Version',\n                id: args.versionId as string\n              });\n            },\n            updateVersion(_result, args, cache) {\n              cache.invalidate({\n                __typename: 'Version',\n                id: args.versionId as string\n              });\n            }\n          }\n        }\n      }),\n      authExchange({\n        addAuthToOperation(params: { authState: SMRAuthState | null; operation: Operation }): Operation {\n          if (!params.authState || !params.authState.token) {\n            return params.operation;\n          }\n\n          const fetchOptions =\n            typeof params.operation.context.fetchOptions === 'function'\n              ? params.operation.context.fetchOptions()\n              : params.operation.context.fetchOptions || {};\n\n          return {\n            ...params.operation,\n            context: {\n              ...params.operation.context,\n              fetchOptions: {\n                ...fetchOptions,\n                headers: {\n                  ...fetchOptions.headers,\n                  Authorization: params.authState.token\n                }\n              }\n            }\n          };\n        },\n        getAuth: async (): Promise<SMRAuthState | null> => {\n          return {\n            token: get(userToken)\n          };\n        },\n        didAuthError({ error }): boolean {\n          return error.message.indexOf('user not logged in') >= 0;\n        }\n      }),\n      persistedFetchExchange({\n        preferGetForPersistedQueries: true\n      }),\n      multipartFetchExchange\n    ]\n  });\n};\n","<script lang=\"ts\">\n  import Dialog from '../general/Dialog.svelte';\n  import { loginDialogOpen } from '$lib/stores/global';\n  import {\n    GetMeDocument,\n    GetOAuthOptionsDocument,\n    OAuthFacebookDocument,\n    OAuthGithubDocument,\n    OAuthGoogleDocument\n  } from '../../generated';\n  import { mutation, operationStore, query } from '@urql/svelte';\n  import Icon from '@iconify/svelte';\n  import githubIcon from '@iconify/icons-mdi/github.js';\n  import googleIcon from '@iconify/icons-mdi/google.js';\n  import facebookIcon from '@iconify/icons-mdi/facebook.js';\n  import { browser } from '$app/env';\n  import { page } from '$app/stores';\n  import { goto } from '$app/navigation';\n  import Toast from '../general/Toast.svelte';\n  import { user, userToken } from '$lib/stores/user';\n  import cookie from 'js-cookie';\n\n  if (browser) {\n    const getMe = operationStore(GetMeDocument, undefined, {\n      pause: true\n    });\n\n    query(getMe);\n\n    let first = true;\n    userToken.subscribe((token) => {\n      if (token) {\n        const oneMonth = new Date(new Date().getTime() + 30 * 24 * 60 * 60 * 1000);\n        cookie.set('token', token, {\n          domain: window.location.hostname,\n          expires: oneMonth\n        });\n      } else if (!first) {\n        cookie.remove('token');\n      }\n\n      first = false;\n\n      if (token) {\n        getMe.reexecute({\n          requestPolicy: 'network-only'\n        });\n\n        const unsub = getMe.subscribe((response) => {\n          if (!response.fetching) {\n            if (response.error) {\n              // TODO Toast or something\n              console.error(response.error.message);\n              unsub();\n            } else if (response.data) {\n              user.set(response.data.getMe);\n              unsub();\n            }\n          }\n        });\n      } else {\n        user.set(null);\n      }\n    });\n  }\n\n  const signInMethods = {\n    github: mutation({\n      query: OAuthGithubDocument\n    }),\n    google: mutation({\n      query: OAuthGoogleDocument\n    }),\n    facebook: mutation({\n      query: OAuthFacebookDocument\n    })\n  };\n\n  let errorMessage = '';\n  let errorToast = false;\n\n  if (browser) {\n    const signInMethod = localStorage.getItem('sign.in.method');\n    localStorage.removeItem('sign.in.method');\n\n    let queryParams = Object.fromEntries($page.query.entries());\n    if (Object.keys(queryParams).length === 0) {\n      queryParams = Object.fromEntries(new URLSearchParams(window.location.search));\n    }\n\n    const code = queryParams['code'];\n    const state = queryParams['state'];\n\n    if (signInMethod && code && state) {\n      signInMethods[signInMethod as 'github' | 'google' | 'facebook']({\n        code,\n        state\n      }).then((result) => {\n        if (result.error) {\n          console.error(result.error.message);\n          errorMessage = 'Error logging in: ' + result.error.message;\n          errorToast = true;\n        } else {\n          userToken.set(result.data.session.token);\n        }\n      });\n    }\n  }\n\n  const oauthOptions = operationStore(\n    GetOAuthOptionsDocument,\n    { callback_url: '' },\n    {\n      requestPolicy: 'network-only'\n    }\n  );\n\n  $: if ($loginDialogOpen) {\n    oauthOptions.variables.callback_url = encodeURIComponent(window.location.origin + window.location.pathname);\n    query(oauthOptions);\n  }\n\n  const goTo = (service: string, url: string) => {\n    localStorage.setItem('sign.in.method', service);\n    goto(url);\n  };\n</script>\n\n<Dialog bind:open={$loginDialogOpen}>\n  <div class=\"grid grid-flow-row gap-4\">\n    <h3 class=\"text-2xl font-bold\">Login / Sign Up</h3>\n    {#if $oauthOptions.fetching}\n      <!-- TODO Placeholders -->\n      <p>Loading...</p>\n    {:else if $oauthOptions.error}\n      <p>Oh no... {$oauthOptions.error.message}</p>\n    {:else}\n      <button on:click={() => goTo('github', $oauthOptions.data.getOAuthOptions.github)} class=\"login-button\">\n        <Icon icon={githubIcon} inline={true} class=\"inline-block mr-2\" />\n        <span>Sign in with Github</span>\n      </button>\n      <button on:click={() => goTo('google', $oauthOptions.data.getOAuthOptions.google)} class=\"login-button\">\n        <Icon icon={googleIcon} inline={true} class=\"inline-block mr-2\" />\n        <span>Sign in with Google</span>\n      </button>\n      <button on:click={() => goTo('facebook', $oauthOptions.data.getOAuthOptions.facebook)} class=\"login-button\">\n        <Icon icon={facebookIcon} inline={true} class=\"inline-block mr-2\" />\n        <span>Sign in with Facebook</span>\n      </button>\n    {/if}\n  </div>\n</Dialog>\n\n<Toast bind:running={errorToast}>\n  <span>{errorMessage}</span>\n</Toast>\n\n<style lang=\"postcss\">\n  .login-button {\n    @apply px-4 py-2 hover:bg-white hover:bg-opacity-10 rounded;\n    @apply focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-opacity-50;\n  }\n</style>\n","<script lang=\"ts\" context=\"module\">\n  import type { Load } from '@sveltejs/kit';\n  import './_global.postcss';\n  import { base } from '$app/paths';\n  import { initializeGraphQLClient } from '$lib/core';\n  import type { Client } from '@urql/svelte';\n  import { gqlClient } from '$lib/stores/global';\n\n  let client: Client;\n\n  export const load: Load = async ({ fetch }) => {\n    client = initializeGraphQLClient(fetch);\n    gqlClient.set(client);\n    return {};\n  };\n</script>\n\n<script lang=\"ts\">\n  import LoginDialog from '$lib/components/auth/LoginDialog.svelte';\n  import { setClient } from '@urql/svelte';\n\n  setClient(client);\n</script>\n\n<svelte:head>\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"{base}/assets/favicon.ico\" />\n  <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"{base}/assets/apple-touch-icon.png?v=69P26YMB35\" />\n  <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"{base}/assets/favicon-32x32.png?v=69P26YMB35\" />\n  <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"{base}/assets/favicon-16x16.png?v=69P26YMB35\" />\n  <link rel=\"manifest\" href=\"{base}/manifest.json?v=69P26YMB35\" />\n  <link rel=\"mask-icon\" href=\"{base}/assets/safari-pinned-tab.svg?v=69P26YMB35\" color=\"#da8517\" />\n  <link rel=\"shortcut icon\" href=\"{base}/assets/favicon.ico?v=69P26YMB35\" />\n  <meta name=\"msapplication-TileColor\" content=\"#da8517\" />\n  <meta name=\"msapplication-config\" content=\"{base}/static/assets/browserconfig.xml?v=69P26YMB35\" />\n  <meta name=\"theme-color\" content=\"#da8517\" />\n\n  <link rel=\"preload\" href=\"{base}/assets/fonts/flow-rounded.woff\" as=\"font\" type=\"font/woff\" />\n</svelte:head>\n\n<main>\n  <slot />\n\n  <LoginDialog />\n</main>\n"],"names":["createClient","get","githubIcon","googleIcon","facebookIcon","cookie"],"mappings":"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"}