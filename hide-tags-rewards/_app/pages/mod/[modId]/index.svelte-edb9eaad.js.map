{"version":3,"file":"index.svelte-edb9eaad.js","sources":["../../../../../../../src/lib/components/mods/ModInfo.svelte","../../../../../../../src/lib/components/mods/ModLatestVersions.svelte","../../../../../../../src/lib/components/mods/ModAuthors.svelte","../../../../../../../src/lib/components/mods/ModLogo.svelte","../../../../../../../src/lib/components/mods/ModDescription.svelte","../../../../../../../src/lib/components/mods/ModVersions.svelte","../../../../../../../src/routes/mod/[modId]/index.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import type { Mod } from '$lib/generated';\n\n  export let mod!: Pick<Mod, 'source_url' | 'created_at' | 'views' | 'downloads' | 'mod_reference'>;\n</script>\n\n<div class=\"text-lg\">\n  <h3 class=\"text-2xl my-4 font-bold\">Info</h3>\n  <span><strong>Source:</strong> <a class=\"underline text-yellow-500\" href={mod.source_url}>{mod.source_url}</a></span\n  ><br />\n  <!-- TODO Nice Date -->\n  <span><strong>Created:</strong> {mod.created_at}</span><br />\n  <span><strong>Views:</strong> {mod.views}</span><br />\n  <span><strong>Downloads:</strong> {mod.downloads}</span><br />\n  <span><strong>Reference:</strong> {mod.mod_reference}</span><br />\n</div>\n","<script lang=\"ts\">\n  import type { Version } from '$lib/generated';\n  import Icon from '@iconify/svelte';\n  import alphaIcon from '@iconify/icons-mdi/alpha.js';\n  import betaIcon from '@iconify/icons-mdi/beta.js';\n  import releaseIcon from '@iconify/icons-mdi/alert-decagram.js';\n  import downloadIcon from '@iconify/icons-mdi/download.js';\n  import { API_REST } from '$lib/core';\n  import { base } from '$app/paths';\n\n  type ILatestVersions = {\n    alpha?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n    beta?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n    release?: Pick<Version, 'id' | 'link' | 'version' | 'created_at'>;\n  };\n\n  const stabilities = {\n    alpha: alphaIcon,\n    beta: betaIcon,\n    release: releaseIcon\n  };\n\n  export let latestVersions!: ILatestVersions;\n  export let modId!: string;\n</script>\n\n<div class=\"grid grid-flow-row gap-y-6\">\n  <h3 class=\"text-2xl my-4 font-bold\">Latest Versions</h3>\n\n  {#each Object.keys(stabilities) as stability}\n    {#if latestVersions[stability]}\n      <div class=\"version\">\n        <div class=\"text-4xl w-14 h-14 p-2.5\">\n          <Icon icon={stabilities[stability]} inline={true} class=\"inline-block\" />\n        </div>\n        <div class=\"grid grid-flow-row\">\n          <a href=\"{base}/mod/{modId}/version/{latestVersions[stability].id}/\" class=\"text-yellow-500 underline\"\n            >Version {latestVersions[stability].version}</a>\n          <div>{latestVersions[stability].created_at}</div>\n        </div>\n        <div class=\"text-3xl w-14 h-14 p-2.5\">\n          <a\n            href={API_REST + '/mod/' + modId + '/versions/' + latestVersions[stability].id + '/download'}\n            class=\"text-yellow-500 underline\">\n            <Icon icon={downloadIcon} inline={true} class=\"inline-block\" />\n          </a>\n        </div>\n      </div>\n    {/if}\n  {/each}\n</div>\n\n<style lang=\"postcss\">\n  .version {\n    @apply grid grid-flow-col text-lg gap-x-4;\n    grid-template-columns: max-content auto max-content;\n  }\n</style>\n","<script lang=\"ts\">\n  import type { User, UserMod } from '$lib/generated';\n  import { base } from '$app/paths';\n\n  export let authors: Array<\n    Pick<UserMod, 'role'> & {\n      user: Pick<User, 'id' | 'username' | 'avatar'>;\n    }\n  >;\n</script>\n\n<div class=\"grid grid-flow-row gap-y-6\">\n  <h3 class=\"text-2xl my-4 font-bold\">Authors</h3>\n\n  <div class=\"grid auto-rows-min text-lg gap-y-4\">\n    {#each authors as author}\n      <div class=\"grid grid-flow-col auto-cols-max gap-x-4\">\n        <div class=\"rounded-full bg-cover w-14 h-14\" style={`background-image: url(\"${author.user.avatar}\")`} />\n        <div class=\"grid grid-flow-row\">\n          <a href=\"{base}/user/{author.user.id}/\" class=\"text-yellow-500 underline\">{author.user.username}</a>\n          <div>{author.role.charAt(0).toUpperCase() + author.role.slice(1).toLowerCase()}</div>\n        </div>\n      </div>\n    {/each}\n  </div>\n</div>\n","<script lang=\"ts\">\n  import { assets } from '$app/paths';\n\n  export let modLogo!: string;\n  export let modName!: string;\n\n  $: logo = modLogo || assets + '/images/no_image.png';\n\n  // TODO Outdated Flag\n</script>\n\n<div>\n  <img class=\"rounded-lg max-w-lg\" src={logo} alt=\"Logo for {modName}\" />\n</div>\n","<script lang=\"ts\">\n  import type { Mod } from '$lib/generated';\n  import { markdown } from '$lib/utils/markdown';\n\n  export let mod!: Pick<Mod, 'full_description' | 'short_description'>;\n\n  $: description = mod.full_description ? markdown(mod.full_description) : mod.short_description;\n</script>\n\n<div class=\"markdown-content\">\n  {#await description then descriptionRendered}\n    <p>{@html descriptionRendered}</p>\n  {/await}\n</div>\n","<script lang=\"ts\">\n  import { GetModVersionsDocument } from '$lib/generated';\n  import { operationStore, query } from '@urql/svelte';\n  import Icon from '@iconify/svelte';\n  import downloadIcon from '@iconify/icons-mdi/download.js';\n  import { API_REST } from '$lib/core';\n  import { markdown } from '$lib/utils/markdown';\n  import { base } from '$app/paths';\n\n  export let modId!: string;\n\n  let expandedVersions = new Set<string>();\n\n  // TODO Pagination\n  const versions = operationStore(GetModVersionsDocument, {\n    mod: modId,\n    limit: 100,\n    offset: 0\n  });\n\n  query(versions);\n\n  const toggleRow = (versionId: string) => {\n    if (expandedVersions.has(versionId)) {\n      expandedVersions.delete(versionId);\n    } else {\n      expandedVersions.add(versionId);\n    }\n    expandedVersions = expandedVersions;\n  };\n</script>\n\n{#if $versions.fetching}\n  <p>Loading...</p>\n{:else if $versions.error}\n  <p>Oh no... {$versions.error.message}</p>\n{:else}\n  <div class=\"grid grid-cols-6 versions\">\n    <!-- Header -->\n    <div>Version</div>\n    <div>Stability</div>\n    <div>SML Version</div>\n    <div>Downloads</div>\n    <div>Upload Date</div>\n    <div><!-- Buttons --></div>\n\n    {#each $versions.data.getMod.versions as version}\n      <div class=\"contents version-header\" on:click={() => toggleRow(version.id)}>\n        <div>{version.version}</div>\n        <div>{version.stability}</div>\n        <div>{version.sml_version}</div>\n        <div>{version.downloads}</div>\n        <!-- TODO Pretty Date -->\n        <div>{version.created_at}</div>\n        <div class=\"grid grid-flow-col gap-4\">\n          <a\n            href={base + '/mod/' + modId + '/version/' + version.id}\n            class=\"py-1 px-4 rounded text-base bg-blue-500 text-center\">View</a>\n          <a\n            href={API_REST + '/mod/' + modId + '/versions/' + version.id + '/download'}\n            class=\"py-1 px-4 rounded text-base bg-green-600 text-center\">Download</a>\n          <!-- TODO SMM -->\n          <a href={base} class=\"py-1 px-4 rounded text-base bg-yellow-600 text-center\">\n            <span>Install</span>\n            <Icon icon={downloadIcon} inline={true} class=\"inline-block\" />\n          </a>\n        </div>\n      </div>\n\n      {#if expandedVersions.has(version.id)}\n        <!-- TODO Pretty Bytes -->\n        <div class=\"col-span-3 p-2\">Size: {version.size}</div>\n        <div class=\"col-span-3 p-2\">Hash: {version.hash}</div>\n\n        <div class=\"col-span-6 p-2 markdown-content\">\n          {#await markdown(version.changelog) then changelogRendered}\n            {@html changelogRendered}\n          {/await}\n        </div>\n      {/if}\n    {/each}\n  </div>\n{/if}\n\n<style lang=\"postcss\">\n  .versions {\n    grid-template-columns: auto auto auto auto max-content auto;\n\n    & .version-header {\n      & > div {\n        @apply border-t-2 border-white p-4;\n      }\n\n      &:hover > div {\n        @apply cursor-pointer;\n        background: rgba(255, 255, 255, 0.25);\n      }\n    }\n  }\n</style>\n","<script lang=\"ts\" context=\"module\">\n  import { paramsToProps } from '$lib/utils/routing';\n  import { operationStore } from '@urql/svelte';\n  import { GetModDocument } from '$lib/generated';\n  import { loadWaitForNoFetch } from '$lib/utils/gql';\n  import MetaDescriptors from '$lib/components/utils/MetaDescriptors.svelte';\n\n  const modQ = operationStore(GetModDocument, { mod: undefined });\n\n  export const load = paramsToProps(async (input) => {\n    modQ.variables.mod = input.page.params.modId;\n    return loadWaitForNoFetch({\n      mod: modQ\n    })(input);\n  });\n</script>\n\n<script lang=\"ts\">\n  import { DeleteModDocument } from '$lib/generated';\n  import { mutation, query } from '@urql/svelte';\n  import ModInfo from '$lib/components/mods/ModInfo.svelte';\n  import ModLatestVersions from '$lib/components/mods/ModLatestVersions.svelte';\n  import ModAuthors from '$lib/components/mods/ModAuthors.svelte';\n  import ModLogo from '$lib/components/mods/ModLogo.svelte';\n  import ModDescription from '$lib/components/mods/ModDescription.svelte';\n  import ModVersions from '$lib/components/mods/ModVersions.svelte';\n  import { user } from '$lib/stores/user';\n  import { goto } from '$app/navigation';\n  import { writable } from 'svelte/store';\n  import Dialog from '$lib/components/general/Dialog.svelte';\n  import Toast from '$lib/components/general/Toast.svelte';\n  import { base } from '$app/paths';\n  import { browser } from '$app/env';\n\n  export let modId!: string;\n  export let mod: typeof modQ;\n\n  let versionsTab = false;\n\n  let errorMessage = '';\n  let errorToast = false;\n\n  const deleteMod = mutation({\n    query: DeleteModDocument\n  });\n\n  $: canUserEdit =\n    $user?.roles?.deleteContent || $mod?.data?.getMod?.authors?.findIndex((author) => author.user_id == $user?.id) >= 0;\n\n  const deleteDialogOpen = writable<boolean>(false);\n\n  const deleteModFn = () => {\n    deleteMod({ modId }).then((value) => {\n      if (value.error) {\n        console.error(value.error.message);\n        errorMessage = 'Error deleting mod: ' + value.error.message;\n        errorToast = true;\n      } else {\n        // TODO Toast or something\n        goto(base + '/mods');\n      }\n    });\n  };\n\n  if (browser) {\n    query(mod);\n  }\n</script>\n\n<svelte:head>\n  {#if !$mod.fetching && !$mod.error && $mod.data.getMod}\n    <MetaDescriptors\n      description={$mod.data.getMod.short_description}\n      title={$mod.data.getMod.name}\n      image={$mod.data.getMod.logo} />\n  {/if}\n</svelte:head>\n\n{#if $mod.fetching}\n  <p>Loading...</p>\n{:else if $mod.error}\n  <p>Oh no... {$mod.error.message}</p>\n{:else if $mod.data.getMod}\n  <div class=\"grid gap-8 grid-auto-max\">\n    <div class=\"grid grid-cols-1 auto-rows-min gap-8\">\n      <div class=\"grid grid-flow-col grid-auto-max h-auto gap-4 items-center\">\n        <h1 class=\"text-4xl my-4 font-bold\">{$mod.data.getMod.name}</h1>\n\n        {#if canUserEdit}\n          <button\n            class=\"py-2 px-4 rounded text-base bg-yellow-600\"\n            on:click={() => goto(base + '/mod/' + modId + '/edit')}>\n            Edit\n          </button>\n          <button class=\"py-2 px-4 rounded text-base bg-red-500\" on:click={() => deleteDialogOpen.set(true)}>\n            Delete\n          </button>\n          <button\n            class=\"py-2 px-4 rounded text-base bg-green-600\"\n            on:click={() => goto(base + '/mod/' + modId + '/new-version')}>\n            New Version\n          </button>\n        {/if}\n\n        <button class=\"py-2 px-4 rounded text-base bg-blue-500\" on:click={() => (versionsTab = !versionsTab)}>\n          {#if !versionsTab}\n            Versions\n          {:else}\n            Description\n          {/if}\n        </button>\n      </div>\n      {#if !versionsTab}\n        <ModDescription mod={$mod.data.getMod} />\n      {:else}\n        <ModVersions modId={$mod.data.getMod.id} />\n      {/if}\n    </div>\n    <div class=\"grid grid-cols-1 auto-rows-min gap-8\">\n      <ModLogo modLogo={$mod.data.getMod.logo} modName={$mod.data.getMod.name} />\n      <ModInfo mod={$mod.data.getMod} />\n      <ModLatestVersions modId={$mod.data.getMod.id} latestVersions={$mod.data.getMod.latestVersions} />\n      <ModAuthors authors={$mod.data.getMod.authors} />\n    </div>\n  </div>\n\n  <Dialog bind:open={$deleteDialogOpen}>\n    <div class=\"grid grid-flow-row gap-4\">\n      <h3 class=\"text-2xl font-bold\">Delete Mod?</h3>\n\n      <span>Are you sure you wish to delete this mod</span>\n\n      <button class=\"py-1 px-4 rounded text-base bg-yellow-600\" on:click={() => deleteDialogOpen.set(false)}>\n        Cancel\n      </button>\n      <button class=\"py-1 px-4 rounded text-base bg-red-500\" on:click={() => deleteModFn()}> Delete </button>\n    </div>\n  </Dialog>\n\n  <Toast bind:running={errorToast}>\n    <span>{errorMessage}</span>\n  </Toast>\n{:else}\n  <!-- TODO Better 404 -->\n  404\n{/if}\n\n<style lang=\"postcss\">\n  .grid-auto-max {\n    grid-template-columns: auto max-content max-content max-content max-content;\n  }\n</style>\n"],"names":["ctx","source_url","created_at","views","downloads","mod_reference","ctx2","mod","version","downloadIcon","id","API_REST","Object","keys","length","stabilities","alpha","alphaIcon","beta","betaIcon","release","releaseIcon","latestVersions","modId","user","username","role","charAt","toUpperCase","slice","toLowerCase","avatar","authors","modLogo","modName","logo","assets","description","full_description","markdown","short_description","data","getMod","versions","error","message","size","hash","changelog","stability","sml_version","has","base","fetching","expandedVersions","Set","operationStore","GetModVersionsDocument","limit","offset","toggleRow","versionId","delete","add","name","__awaiter","thisArg","_arguments","P","generator","modQ","GetModDocument","load","paramsToProps","variables","input","page","params","loadWaitForNoFetch","_a","_b","_c","_d","versionsTab","errorMessage","errorToast","deleteMod","mutation","query","DeleteModDocument","deleteDialogOpen","writable","deleteModFn","then","value","canUserEdit","$user","roles","deleteContent","$mod","findIndex","author","user_id","goto","set"],"mappings":"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"}