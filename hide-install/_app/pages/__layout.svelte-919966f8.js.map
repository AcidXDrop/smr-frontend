{"version":3,"file":"__layout.svelte-919966f8.js","sources":["../../../../../src/lib/components/auth/LoginDialog.svelte","../../../../../src/routes/__layout.svelte","../../../../../src/lib/core/graphql.ts"],"sourcesContent":["<script lang=\"ts\">\n  import Dialog from '../general/Dialog.svelte';\n  import { loginDialogOpen } from '$lib/stores/global';\n  import {\n    GetMeDocument,\n    GetOAuthOptionsDocument,\n    OAuthFacebookDocument,\n    OAuthGithubDocument,\n    OAuthGoogleDocument\n  } from '../../generated';\n  import { mutation, operationStore, query } from '@urql/svelte';\n  import Icon from '@iconify/svelte';\n  import githubIcon from '@iconify/icons-mdi/github.js';\n  import googleIcon from '@iconify/icons-mdi/google.js';\n  import facebookIcon from '@iconify/icons-mdi/facebook.js';\n  import { browser } from '$app/env';\n  import { page } from '$app/stores';\n  import { goto } from '$app/navigation';\n  import Toast from '../general/Toast.svelte';\n  import { user, userToken } from '$lib/stores/user';\n  import cookie from 'js-cookie';\n\n  if (browser) {\n    const getMe = operationStore(GetMeDocument, undefined, {\n      pause: true\n    });\n\n    query(getMe);\n\n    let first = true;\n    userToken.subscribe((token) => {\n      if (token) {\n        const oneMonth = new Date(new Date().getTime() + 30 * 24 * 60 * 60 * 1000);\n        cookie.set('token', token, {\n          domain: window.location.hostname,\n          expires: oneMonth\n        });\n      } else if (!first) {\n        cookie.remove('token');\n      }\n\n      first = false;\n\n      if (token) {\n        getMe.reexecute({\n          requestPolicy: 'network-only'\n        });\n\n        const unsub = getMe.subscribe((response) => {\n          if (!response.fetching) {\n            if (response.error) {\n              // TODO Toast or something\n              console.error(response.error.message);\n              unsub();\n            } else if (response.data) {\n              user.set(response.data.getMe);\n              unsub();\n            }\n          }\n        });\n      } else {\n        user.set(null);\n      }\n    });\n  }\n\n  const signInMethods = {\n    github: mutation({\n      query: OAuthGithubDocument\n    }),\n    google: mutation({\n      query: OAuthGoogleDocument\n    }),\n    facebook: mutation({\n      query: OAuthFacebookDocument\n    })\n  };\n\n  let errorMessage = '';\n  let errorToast = false;\n\n  if (browser) {\n    const signInMethod = localStorage.getItem('sign.in.method');\n    localStorage.removeItem('sign.in.method');\n\n    let queryParams = Object.fromEntries($page.query.entries());\n    if (Object.keys(queryParams).length === 0) {\n      queryParams = Object.fromEntries(new URLSearchParams(window.location.search));\n    }\n\n    const code = queryParams['code'];\n    const state = queryParams['state'];\n\n    if (signInMethod && code && state) {\n      signInMethods[signInMethod as 'github' | 'google' | 'facebook']({\n        code,\n        state\n      }).then((result) => {\n        if (result.error) {\n          console.error(result.error.message);\n          errorMessage = 'Error logging in: ' + result.error.message;\n          errorToast = true;\n        } else {\n          userToken.set(result.data.session.token);\n        }\n      });\n    }\n  }\n\n  const oauthOptions = operationStore(\n    GetOAuthOptionsDocument,\n    { callback_url: '' },\n    {\n      requestPolicy: 'network-only'\n    }\n  );\n\n  $: if ($loginDialogOpen) {\n    oauthOptions.variables.callback_url = encodeURIComponent(window.location.origin + window.location.pathname);\n    query(oauthOptions);\n  }\n\n  const goTo = (service: string, url: string) => {\n    localStorage.setItem('sign.in.method', service);\n    goto(url);\n  };\n</script>\n\n<Dialog bind:open={$loginDialogOpen}>\n  <div class=\"grid grid-flow-row gap-4\">\n    <h3 class=\"text-2xl font-bold\">Login / Sign Up</h3>\n    {#if $oauthOptions.fetching}\n      <!-- TODO Placeholders -->\n      <p>Loading...</p>\n    {:else if $oauthOptions.error}\n      <p>Oh no... {$oauthOptions.error.message}</p>\n    {:else}\n      <button on:click={() => goTo('github', $oauthOptions.data.getOAuthOptions.github)} class=\"login-button\">\n        <Icon icon={githubIcon} inline={true} class=\"inline-block mr-2\" />\n        <span>Sign in with Github</span>\n      </button>\n      <button on:click={() => goTo('google', $oauthOptions.data.getOAuthOptions.google)} class=\"login-button\">\n        <Icon icon={googleIcon} inline={true} class=\"inline-block mr-2\" />\n        <span>Sign in with Google</span>\n      </button>\n      <button on:click={() => goTo('facebook', $oauthOptions.data.getOAuthOptions.facebook)} class=\"login-button\">\n        <Icon icon={facebookIcon} inline={true} class=\"inline-block mr-2\" />\n        <span>Sign in with Facebook</span>\n      </button>\n    {/if}\n  </div>\n</Dialog>\n\n<Toast bind:running={errorToast}>\n  <span>{errorMessage}</span>\n</Toast>\n\n<style lang=\"postcss\">\n  .login-button {\n    @apply px-4 py-2 hover:bg-white hover:bg-opacity-10 rounded;\n    @apply focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-opacity-50;\n  }\n</style>\n","<script lang=\"ts\" context=\"module\">\n  import type { Load } from '@sveltejs/kit';\n  import './_global.postcss';\n  import { base } from '$app/paths';\n  import { initializeGraphQLClient } from '$lib/core';\n  import type { Client } from '@urql/svelte';\n  import { gqlClient } from '$lib/stores/global';\n\n  let client: Client;\n\n  export const load: Load = async ({ fetch }) => {\n    client = initializeGraphQLClient(fetch);\n    gqlClient.set(client);\n    return {};\n  };\n</script>\n\n<script lang=\"ts\">\n  import LoginDialog from '$lib/components/auth/LoginDialog.svelte';\n  import { setClient } from '@urql/svelte';\n\n  setClient(client);\n</script>\n\n<svelte:head>\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"{base}/assets/favicon.ico\" />\n  <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"{base}/assets/apple-touch-icon.png?v=69P26YMB35\" />\n  <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"{base}/assets/favicon-32x32.png?v=69P26YMB35\" />\n  <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"{base}/assets/favicon-16x16.png?v=69P26YMB35\" />\n  <link rel=\"manifest\" href=\"{base}/manifest.json?v=69P26YMB35\" />\n  <link rel=\"mask-icon\" href=\"{base}/assets/safari-pinned-tab.svg?v=69P26YMB35\" color=\"#da8517\" />\n  <link rel=\"shortcut icon\" href=\"{base}/assets/favicon.ico?v=69P26YMB35\" />\n  <meta name=\"msapplication-TileColor\" content=\"#da8517\" />\n  <meta name=\"msapplication-config\" content=\"{base}/static/assets/browserconfig.xml?v=69P26YMB35\" />\n  <meta name=\"theme-color\" content=\"#da8517\" />\n\n  <link rel=\"preload\" href=\"{base}/assets/fonts/flow-rounded.woff\" as=\"font\" type=\"font/woff\" />\n</svelte:head>\n\n<main>\n  <slot />\n\n  <LoginDialog />\n</main>\n","import schema from '$lib/generated/graphql.schema.urql.json';\nimport type { Client } from '@urql/svelte';\nimport { createClient } from '@urql/svelte';\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport { persistedFetchExchange } from '@urql/exchange-persisted-fetch';\nimport { multipartFetchExchange } from '@urql/exchange-multipart-fetch';\nimport { API_GRAPHQL } from './api';\nimport { userToken } from '$lib/stores/user';\nimport { authExchange } from '@urql/exchange-auth';\nimport type { Operation } from '@urql/core';\nimport type { LoadInput } from '@sveltejs/kit/types/page';\nimport { get } from 'svelte/store';\n\ninterface SMRAuthState {\n  token: string | null;\n}\n\nexport const initializeGraphQLClient = (fetch?: LoadInput['fetch']): Client => {\n  return createClient({\n    url: API_GRAPHQL,\n    fetch,\n    exchanges: [\n      cacheExchange({\n        schema,\n        keys: {\n          GetMods: () => null,\n          LatestVersions: () => null,\n          UserMod: () => null,\n          GetGuides: () => null,\n          OAuthOptions: () => null,\n          UserRoles: () => null\n        },\n        updates: {\n          Mutation: {\n            deleteGuide(_result, args, cache) {\n              cache.invalidate({\n                __typename: 'Guide',\n                id: args.guideId as string\n              });\n            },\n            deleteMod(_result, args, cache) {\n              cache.invalidate({\n                __typename: 'Mod',\n                id: args.modId as string\n              });\n            },\n            approveMod(_result, args, cache) {\n              cache.invalidate({\n                __typename: 'Mod',\n                id: args.modId as string\n              });\n            },\n            denyMod(_result, args, cache) {\n              cache.invalidate({\n                __typename: 'Mod',\n                id: args.modId as string\n              });\n            },\n            approveVersion(_result, args, cache) {\n              cache.invalidate({\n                __typename: 'Version',\n                id: args.versionId as string\n              });\n            },\n            denyVersion(_result, args, cache) {\n              cache.invalidate({\n                __typename: 'Version',\n                id: args.versionId as string\n              });\n            },\n            deleteSMLVersion(_result, args, cache) {\n              cache.invalidate({\n                __typename: 'SMLVersion',\n                id: args.smlVersionId as string\n              });\n            },\n            deleteVersion(_result, args, cache) {\n              cache.invalidate({\n                __typename: 'Version',\n                id: args.versionId as string\n              });\n            },\n            updateVersion(_result, args, cache) {\n              cache.invalidate({\n                __typename: 'Version',\n                id: args.versionId as string\n              });\n            }\n          }\n        }\n      }),\n      authExchange({\n        addAuthToOperation(params: { authState: SMRAuthState | null; operation: Operation }): Operation {\n          if (!params.authState || !params.authState.token) {\n            return params.operation;\n          }\n\n          const fetchOptions =\n            typeof params.operation.context.fetchOptions === 'function'\n              ? params.operation.context.fetchOptions()\n              : params.operation.context.fetchOptions || {};\n\n          return {\n            ...params.operation,\n            context: {\n              ...params.operation.context,\n              fetchOptions: {\n                ...fetchOptions,\n                headers: {\n                  ...fetchOptions.headers,\n                  Authorization: params.authState.token\n                }\n              }\n            }\n          };\n        },\n        getAuth: async (): Promise<SMRAuthState | null> => {\n          return {\n            token: get(userToken)\n          };\n        },\n        didAuthError({ error }): boolean {\n          return error.message.indexOf('user not logged in') >= 0;\n        }\n      }),\n      persistedFetchExchange({\n        preferGetForPersistedQueries: true\n      }),\n      multipartFetchExchange\n    ]\n  });\n};\n"],"names":["githubIcon","googleIcon","facebookIcon","ctx","error","message","ctx2","fetching","getMe","operationStore","GetMeDocument","pause","first","subscribe","token","oneMonth","Date","getTime","set","domain","window","location","hostname","expires","remove","reexecute","requestPolicy","unsub","response","data","signInMethods","github","mutation","query","OAuthGithubDocument","google","OAuthGoogleDocument","facebook","OAuthFacebookDocument","errorMessage","errorToast","signInMethod","localStorage","getItem","removeItem","queryParams","Object","fromEntries","$page","entries","keys","length","URLSearchParams","search","code","state","then","result","session","oauthOptions","GetOAuthOptionsDocument","callback_url","goTo","service","url","setItem","$loginDialogOpen","variables","encodeURIComponent","origin","pathname","$oauthOptions","getOAuthOptions","__awaiter","thisArg","_arguments","P","generator","client","load","fetch","createClient","API_GRAPHQL","exchanges","cacheExchange","schema","GetMods","LatestVersions","UserMod","GetGuides","OAuthOptions","UserRoles","updates","Mutation","deleteGuide","_result","args","cache","invalidate","__typename","id","guideId","deleteMod","modId","approveMod","denyMod","approveVersion","versionId","denyVersion","deleteSMLVersion","smlVersionId","deleteVersion","updateVersion","authExchange","addAuthToOperation","params","authState","operation","fetchOptions","context","__spreadProps","headers","Authorization","getAuth","async","get","userToken","didAuthError","indexOf","persistedFetchExchange","preferGetForPersistedQueries","multipartFetchExchange","initializeGraphQLClient"],"mappings":"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"}